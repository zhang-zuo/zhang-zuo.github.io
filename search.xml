<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++笔记（一）基础编程</title>
    <url>/2022/04/08/C++%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>此C++系列的笔记，是根据黑马程序员的C++视频教程所写。基础编程包括的是对于接触过C的人，一些不常见或者容易忘记的一些知识点</p>
<span id="more"></span>

<h3 id="浮点数据类型"><a href="#浮点数据类型" class="headerlink" title="浮点数据类型"></a>浮点数据类型</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> f1 = <span class="number">3.14f</span>;      <span class="comment">//如果不写这个ｆ，那么程序会默认为这个是double类型</span></span><br><span class="line">　　　　　　　　　　　　   <span class="comment">//因此，这段代码会经过一个强制类型转换成float。</span></span><br></pre></td></tr></table></figure>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><ul>
<li>水平制表符\t  </li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;a\thello&quot;</span> &lt;&lt; endl;      </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;aa\thello&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;aaa\thello&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//这三行代码的输出，会非常的整齐：</span></span><br><span class="line"><span class="comment">// a   hello</span></span><br><span class="line"><span class="comment">// aa  hello</span></span><br><span class="line"><span class="comment">// aaa hello          //制表符会自动调整宽度，可以整齐的输出</span></span><br></pre></td></tr></table></figure>

<h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><ul>
<li>语法：<strong>表达式１　？　表达式２　：　表达式３</strong></li>
<li>解释：如果表达式１的值为真，执行表达式２，并返回表达式２的结果（反之就是表达式３）。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">c = a &gt; b ? a :b;           <span class="comment">//给c赋值：a和b中最大的值</span></span><br><span class="line">a &gt; b ? a : b = <span class="number">100</span>;　　　　　<span class="comment">//给a和b中最大的值，赋值100</span></span><br></pre></td></tr></table></figure>

<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul>
<li>while语句是先进行判断，再运行语句</li>
<li>do…while语句是先运行一次循环，再进行判断。</li>
<li><ul>
<li>语法：do{循环语句}　while(循环条件);</li>
</ul>
</li>
<li>for循环执行顺序：</li>
</ul>
<img src="https://s2.loli.net/2022/03/18/Pd31ZDt8iYgIU5F.png" alt="image-20220302194547856" style="zoom: 67%;" />

<h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><ul>
<li>break：跳转出最近的内层循环，是直接退出循环，而不是进行下一次循环</li>
<li>continue：不执行剩下的语句，直接进行下一次循环</li>
<li>goto：无条件跳转</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">goto</span> flag;     <span class="comment">//程序执行到这里，会强制跳转到flag标记处</span></span><br><span class="line">flag:　　　　　　<span class="comment">//需要要有标记处</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul>
<li>指针就是地址，既然是地址，那么所占用的大小，也就是int大小（32位系统占用４字节，64位系统占用８字节，一般都是32字节的）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p;              <span class="comment">//定义int型指针，p就是一个地址</span></span><br><span class="line">p = &amp;a;　　　　　　　　 <span class="comment">//＆a就是取地址，此时，p是a的地址</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;　 <span class="comment">//*解引用，找到p作为地址所指向的值</span></span><br><span class="line">					　<span class="comment">//*p = 10</span></span><br></pre></td></tr></table></figure>

<h4 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h4><ul>
<li>不可访问，默认指向了0地址（0~255地址被系统占用）。</li>
<li>一般用于你有一个指针，暂时不知道赋什么值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;        <span class="comment">//空指针</span></span><br></pre></td></tr></table></figure>

<h4 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h4><ul>
<li>常量指针：指针的指向可以修改，但是指针指向的值不可修改</li>
<li>指针常量：指针的指向不可修改，但是指针指向的值可以修改</li>
<li>修饰指针和常量：指针的指向和指针指向的值都不可修改</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b =<span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p = &amp;a;   <span class="comment">//常量指针</span></span><br><span class="line">*p = <span class="number">20</span>;　　　　　　　　<span class="comment">//错误，指针指向的值不可以修改</span></span><br><span class="line">p = &amp;b;　　　　　　　　 <span class="comment">//正确，指针的指向可以修改</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p = &amp;a;   <span class="comment">//指针常量</span></span><br><span class="line">*p = <span class="number">20</span>;             <span class="comment">//正确，指针指向的值可以修改</span></span><br><span class="line">p = &amp;b;              <span class="comment">//错误，指针的指向不可修改</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> <span class="type">const</span> *p = &amp;a;   <span class="comment">//修饰指针和常量，都不可修改</span></span><br></pre></td></tr></table></figure>

<h4 id="指针与函数"><a href="#指针与函数" class="headerlink" title="指针与函数"></a>指针与函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *p1, <span class="type">int</span> *p2)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = *p1;</span><br><span class="line">    *p1 = *p2;        <span class="comment">//用解引用的方式，p1地址指向的值</span></span><br><span class="line">    *p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swap</span>(&amp;a, &amp;b);　　　<span class="comment">//将a,b取地址，可改变形参和实参</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><h4 id="定义和使用（三种方式）"><a href="#定义和使用（三种方式）" class="headerlink" title="定义和使用（三种方式）"></a>定义和使用（三种方式）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//&#125;s3;                  //对应方式三的形式</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    student s1;　　　　　 <span class="comment">//方式一：直接声明一个结构体</span></span><br><span class="line">    student s2 = &#123;<span class="string">&quot;李四&quot;</span>, <span class="number">19</span>, <span class="number">90</span>&#125;;　　<span class="comment">//方式二：声明结构体是直接赋值</span></span><br><span class="line">    s3.name = <span class="string">&quot;王五&quot;</span>;　　 <span class="comment">//方式三：在结构体的最后命名s3，可以直接使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    student arry[<span class="number">3</span>] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">19</span>,<span class="number">90</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>,<span class="number">91</span>&#125;</span><br><span class="line">    &#125;;                        <span class="comment">//直接赋值的方式</span></span><br><span class="line">    arry[<span class="number">1</span>].name = <span class="string">&quot;王五&quot;</span>;　　　<span class="comment">//可以对数组直接使用.运算符，访问数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h4><ul>
<li>就是使用指针访问结构体中的变量，使用-&gt;运算符</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    student s = &#123;<span class="string">&quot;张三&quot;</span>, <span class="number">19</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">//int *p = &amp;s;              //必须对应到s的类型</span></span><br><span class="line">    student *p = &amp;s;　　　　　　　 <span class="comment">//定义一个指针指向结构体</span></span><br><span class="line">    cout &lt;&lt; p-&gt;name &lt;&lt; endl;　　　<span class="comment">//指针访问结构的变量，使用-&gt;运算符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结构体做函数参数"><a href="#结构体做函数参数" class="headerlink" title="结构体做函数参数"></a>结构体做函数参数</h4><ul>
<li>有值传递（形参修改不会影响实参的值）和地址传递（形参和实参相同，修改任一项都会更改另一项）两种</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义结构体同上，struct student</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printstudent1</span><span class="params">(student s)</span></span>&#123;</span><br><span class="line">    s.age = <span class="number">20</span>;                 <span class="comment">//值传递不会修改实参的值，因此没用</span></span><br><span class="line">    cout &lt;&lt; s.name &lt;&lt; endl;       <span class="comment">//值传递使用.运算符访问</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printstudent2</span><span class="params">(student *p)</span></span>&#123;　　<span class="comment">//形参是定义一个指针</span></span><br><span class="line">    s-&gt;age = <span class="number">20</span>;                   <span class="comment">//地址传递会修改实参的值</span></span><br><span class="line">    cout &lt;&lt; p-&gt;name &lt;&lt; endl;　　　　<span class="comment">//地址传递使用-&gt;运算符访问</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    student s = &#123;<span class="string">&quot;战三&quot;</span>, <span class="number">29</span> ,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">printstudent1</span>(s);</span><br><span class="line">    <span class="built_in">printstudent2</span>(&amp;s);　　<span class="comment">//使用地址传递，也需要对应使用取地址符号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结构体中const使用"><a href="#结构体中const使用" class="headerlink" title="结构体中const使用"></a>结构体中const使用</h4><ul>
<li>由于地址传递可以更改实参的值，为了防止误操作而修改的实参的值，因此引入了const。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义如上：struct student</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printstudent2</span><span class="params">(<span class="type">const</span> student *p)</span></span>&#123;　<span class="comment">//在形参时添加const</span></span><br><span class="line">    s-&gt;age = <span class="number">20</span>;       <span class="comment">//这里会报错，因此使用了const不能修改实参的值</span></span><br><span class="line">    　　　　　　　　　　　 <span class="comment">//const就是让函数中的操作只可以读，不可以</span></span><br><span class="line">    cout &lt;&lt; p-&gt;name &lt;&lt; endl;　　　　<span class="comment">//地址传递使用-&gt;运算符访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>C++笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记（三）类和对象1</title>
    <url>/2022/04/08/C++%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A11/</url>
    <content><![CDATA[<p>此C++系列的笔记，是根据黑马程序员的C++视频教程所写。这部分主要讲解的类和对象，是C++面向对象编程的重点</p>
<span id="more"></span>

<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul>
<li>就是class类，类中需要包含成员属性（成员变量）和成员行为（成员函数），还有访问权限：public、private、protected。如果不写访问权限，默认就是private权限</li>
<li>访问权限：</li>
<li><ul>
<li>public：类内和类外都可以访问</li>
<li>private：类内可以访问，类外不可以访问</li>
<li>protected：类内可以访问，类外不可以访问（在后续的继承讲解）</li>
</ul>
</li>
<li>class类与struct结构体的区别：class类可以选择访问权限，且默认是私有访问权限；struct结构体默认是公共访问权限</li>
<li>访问私有成员的方法：可以在公共成员函数写私有成员变量的读和写函数</li>
<li>一般习惯把成员变量放在私有访问权限中，然后根据成员变量是否可读还是可写，写出对应的可读（get）和可写（set）函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;                <span class="comment">//建立一个a的类</span></span><br><span class="line">  <span class="keyword">public</span>:　　　　　　　　　<span class="comment">//访问权限公共</span></span><br><span class="line">    <span class="type">int</span> val;　　　　　　　<span class="comment">//公共成员变量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span>;       <span class="comment">//公共成员函数声明，在类外进行定义函数内容</span></span><br><span class="line">  <span class="keyword">private</span>:　　　　　　　　 <span class="comment">//访问权限私有</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;　　　　　<span class="comment">//私有成员函数</span></span><br><span class="line">    	...　　　　　　　　<span class="comment">//成员函数可以直接在类内进行定义内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;　　　　　　　　　　　　　<span class="comment">//创建类的对象，与结构体一模一样</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">a::func1</span><span class="params">()</span></span>&#123;        <span class="comment">//定义类内的成员函数，需要使用::运算符</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象的初始化和清理"><a href="#对象的初始化和清理" class="headerlink" title="对象的初始化和清理"></a>对象的初始化和清理</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ul>
<li>语法：<code>类名()&#123;&#125;</code></li>
<li>构造函数，没有返回值也不写void</li>
<li>函数名称与类名相同</li>
<li>构造函数可以有参数，因此可以发生重载</li>
<li>程序在创建对象的时候会自动调用构造函数，且只会调用一次</li>
<li>如果没有写构造函数，编译器会自动生成一个空的构造函数</li>
</ul>
<h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><ul>
<li>语法：<code>~类名()&#123;&#125;</code></li>
<li>析构函数，没有返回值也不写void</li>
<li>函数名称与类名相同，在名称前添加～</li>
<li>析构函数不可以有参数，因此不会发生重载</li>
<li>程序在对象销毁前会自动调用析构函数，且只会调用一次</li>
<li>如果没有写析构函数，编译器会自动生成一个空的析构函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> a)&#123;&#125;         <span class="comment">//构造函数</span></span><br><span class="line">    ~<span class="built_in">student</span>()&#123;&#125;　　　　　　　　<span class="comment">//析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    student s1; <span class="comment">//创建对象的时候，会自动调用一次构造函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//返回之后，程序的内存被释放，在此之前会运行一次析构函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="构造函数的分类"><a href="#构造函数的分类" class="headerlink" title="构造函数的分类"></a>构造函数的分类</h4><ul>
<li>分类：</li>
<li><ul>
<li>按照参数分类：有参构造和无参构造</li>
<li>按照类型分类：普通构造和拷贝构造</li>
</ul>
</li>
<li>有参构造函数和无参构造函数根据是否有无参数分类，可以重载</li>
<li>拷贝构造函数有固定的写法</li>
<li>调用：</li>
<li><ul>
<li>括号法</li>
<li>显示法</li>
<li>隐式转换法</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()&#123;&#125;                   <span class="comment">//无参构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a)&#123;&#125;　　　　　　　　 <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)&#123;&#125;　　 <span class="comment">//拷贝构造函数：顾名思义，需要拷贝，那么需要将另一个类传入进来，并不能修改传入进来的类，所以需要使用const和引用的方法</span></span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;&#125;                  <span class="comment">//析构函数</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;                   <span class="comment">//调用的方法如下</span></span><br><span class="line">    <span class="comment">//括号法</span></span><br><span class="line">    Person p1;                   <span class="comment">//默认构造函数调用</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;　　　　　　　　　<span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>;　　　　　　　　　<span class="comment">//拷贝构造函数</span></span><br><span class="line">    <span class="comment">//注：拷贝构造函数会把被拷贝的类中成员复制一份给新的类</span></span><br><span class="line">    <span class="comment">//也就是说，此时p3的类与p2的类完全相同，包括成员变量的值都是一样的</span></span><br><span class="line">    <span class="comment">//注意事项：</span></span><br><span class="line">    <span class="comment">//默认构造函数不能使用()，因为编译器会认为这是一句函数的声明：</span></span><br><span class="line">    <span class="comment">//如：Person p1();这跟函数声明一样，编译器可以通过，但是不会创建类</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//显示法</span></span><br><span class="line">    Person p1;</span><br><span class="line">    Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>);      <span class="comment">//有参构造</span></span><br><span class="line">    Person p3 = <span class="built_in">Person</span>(p2);　　　 <span class="comment">//拷贝构造</span></span><br><span class="line">    <span class="comment">//注：Person(10);这是个匿名对象</span></span><br><span class="line">    <span class="comment">//匿名对象的特点：当前行执行结束，系统会立即回收匿名对象</span></span><br><span class="line">    <span class="comment">//就是说，匿名对象这行代码之后，系统直接回收，运行了析构函数</span></span><br><span class="line">    <span class="comment">//注：不要使用拷贝构造函数，初始化匿名对象</span></span><br><span class="line">    <span class="comment">//如：Person(p3);这句话编译器会等同于Person p3;因此出现重定义</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//隐式转换法</span></span><br><span class="line">    Person p4 = <span class="number">10</span>;     <span class="comment">//等价于Person p4 = Person(10)　有参构造</span></span><br><span class="line">    Person p5 = p4;　　　<span class="comment">//拷贝构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="拷贝构造函数调用时机"><a href="#拷贝构造函数调用时机" class="headerlink" title="拷贝构造函数调用时机"></a>拷贝构造函数调用时机</h4><ul>
<li>使用一个已经创建完毕的对象来初始化一个新的对象，就是传统的复制概念</li>
<li>值传递的方式给函数参数传值，会调用拷贝构造函数</li>
<li>值方式返回局部对象，会调用拷贝构造函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">public</span>:</span></span></span><br><span class="line"><span class="params"><span class="function">    Person()&#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    Person(<span class="type">int</span> a)&#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">    Person(<span class="type">const</span> Person &amp;p)&#123;&#125;       <span class="comment">//拷贝构造函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    ~Person()&#123;&#125;　　　　　　　　　　　　 <span class="comment">//析构函数</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">//初始化新的对象：</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//值传递方式给函数参数传值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dowork1</span><span class="params">(Person p)</span></span>&#123;              <span class="comment">//给函数参数传值</span></span><br><span class="line">&#125;　　　　　　　　　　　　　　　　　　　　　<span class="comment">//会在此时调用拷贝构造函数</span></span><br><span class="line">  <span class="comment">//相当于函数内部是使用了一个拷贝的副本运行，运行结束也会执行析构函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;　　　　　　　　　　　　</span><br><span class="line">    Person p;　　　　　　　　　　　　　　<span class="comment">//定义一个类，调用了构造函数</span></span><br><span class="line">    <span class="built_in">dowork1</span>(p);　　　　　　　　　　　　　<span class="comment">//使用函数参数传值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回值的方式调用拷贝构造函数</span></span><br><span class="line"><span class="function">Person <span class="title">dowork2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Person p1;                 <span class="comment">//定义一个类，调用了构造函数</span></span><br><span class="line">    <span class="keyword">return</span> p1;　　　　　　　　　　<span class="comment">//返回一个类，此时会调用考别构造函数</span></span><br><span class="line">&#125;</span><br><span class="line">　　<span class="comment">//相当于在函数返回时候，返回了一个拷贝的副本，运行结束会执行析构函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p = <span class="built_in">dowork2</span>();　　　　<span class="comment">//运行完，就执行析构函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="构造函数调用规则"><a href="#构造函数调用规则" class="headerlink" title="构造函数调用规则"></a>构造函数调用规则</h4><ul>
<li>默认写一个类的情况下，编译器至少会添加３个函数：</li>
<li><ul>
<li>默认构造函数（无参数，函数体为空）</li>
<li>默认析构函数（无参数，函数体为空）</li>
<li>默认拷贝构造函数，对属性值进行拷贝</li>
</ul>
</li>
<li>规则如下：</li>
<li><ul>
<li>如果用户定义有参构造函数，编译器就不会提供默认构造函数，但是会提供默认的拷贝构造函数</li>
<li><ul>
<li>就是说，你写了有参构造函数，而你调用默认构造函数时，编译器会找不到，但是拷贝构造函数还是有的</li>
</ul>
</li>
<li>如果用户定义拷贝构造函数，编译器不会提供其他构造函数</li>
<li><ul>
<li>跟上面一样，如果写了拷贝构造函数，而你调用了其他构造函数，编译器就找不到了</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="深拷贝和浅拷贝（面试经典）"><a href="#深拷贝和浅拷贝（面试经典）" class="headerlink" title="深拷贝和浅拷贝（面试经典）"></a>深拷贝和浅拷贝（面试经典）</h4><ul>
<li>浅拷贝：简单的复制拷贝操作（默认的拷贝构造函数）</li>
<li>深拷贝：在堆区重新申请空间，进行拷贝操作</li>
<li>浅拷贝带来的问题：重复的释放同一段堆区内存，使得出现非法操作</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浅拷贝问题所在：</span></span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> height)&#123;</span><br><span class="line">        m_age = a;</span><br><span class="line">        m_height = <span class="keyword">new</span> <span class="built_in">int</span>(height);  <span class="comment">//把数据放在堆区</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        <span class="comment">//自己管理的堆区数据，一般都在析构函数对其进行释放</span></span><br><span class="line">        <span class="keyword">if</span>(m_height != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> m_height;</span><br><span class="line">            m_height = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span>　&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="type">int</span> *m_height; <span class="comment">//用指针是因为我们要把数据放在堆区，自己管理</span></span><br><span class="line">    　　　　　　　　　<span class="comment">//那么我们就需要有对其进行释放地方，析构的用处在此</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">160</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;　　　<span class="comment">//由于我们没有写拷贝构造函数，因此只是简单的</span></span><br><span class="line">    　　　　　　　　　　　 <span class="comment">//赋值操作，是浅拷贝</span></span><br><span class="line">    cout &lt;&lt; *p2.m_height &lt;&lt; endl; <span class="comment">//因为定义的是个指针，所以解引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的代码就会出现浅拷贝的问题，程序会出错：非法操作。</li>
<li><ul>
<li>首先是堆区的数据是<strong>先入后出</strong>的，所以释放时也是先释放的p2中的（其实可以不管这个顺序的，因为指向的是同一个堆区数据）</li>
<li>然后我们没有写拷贝构造函数，因此p2的拷贝是简单的赋值拷贝（浅拷贝），而m_height参数是一个指针（地址），仅仅将地址赋值给p2了，只不过这个地址指向的是一个堆区</li>
<li>最后就是问题所在，p2被释放的时候，析构函数将m_height指向的堆区数据释放了，然而在p1被释放的时候，析构函数又一次将m_height指向的堆区数据释放，出现了释放一块未指定的区域，造成非法操作。下面用图展示：</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/18/lbOfnvDepaX2S1c.png" alt="image-20220313102234078"></p>
<ul>
<li>下面就使用深拷贝的方式解决这个问题，就是让p2指向另一块堆区数据，数据值相同，但是这样两次释放数据就不会重复释放同一块了。用图展示：</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/18/HixKtEIGByqvJnd.png" alt="image-20220313102401313"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码结构都如上面的代码结构</span></span><br><span class="line"><span class="comment">//我们不使用编译器自己默认添加的拷贝构造函数，我们自己写拷贝构造函数，然后每一次都在堆区新建一个数据，就不会出现重复释放的问题：</span></span><br><span class="line"><span class="comment">//上面的代码添加这段我们自己写的拷贝构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)&#123;　</span><br><span class="line">    m_age = p.m_age;</span><br><span class="line">    <span class="comment">//m_height = p.m_height    //编译器默认添加的就是这个</span></span><br><span class="line">    m_height = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_height);</span><br><span class="line">    <span class="comment">//我们自己添加new,因为m_height是一个指针，所以要使用解引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><ul>
<li>语法：<code>构造函数():属性1(值1),属性2(值2) ... &#123;&#125;</code></li>
<li>可以有更加灵活的方式</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//传统的初始化方式：</span></span><br><span class="line">    <span class="comment">//Person()&#123;</span></span><br><span class="line">    <span class="comment">//    m_a = a;</span></span><br><span class="line">    <span class="comment">//    m_b = b;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//初始化列表的方式：</span></span><br><span class="line">    <span class="built_in">Person</span>():<span class="built_in">m_a</span>(<span class="number">10</span>),<span class="built_in">m_b</span>(<span class="number">20</span>)&#123;　　　<span class="comment">//直接初始化</span></span><br><span class="line">        <span class="comment">//正常的函数体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更加灵活的初始化列表：</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> b):<span class="built_in">m_a</span>(a),<span class="built_in">m_b</span>(b)&#123;</span><br><span class="line">        <span class="comment">//正常的函数体，跟上面的初始化列表，二选一</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p;      <span class="comment">//使用初始化列表的方式，自动初始化类中变量</span></span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span></span>;  <span class="comment">//使用更加灵活的初始化列表方式</span></span><br><span class="line">    　　　　　　　　　　　<span class="comment">//可以自定义初始化的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类对象作为类成员"><a href="#类对象作为类成员" class="headerlink" title="类对象作为类成员"></a>类对象作为类成员</h4><ul>
<li>就是在类中嵌套了另一个类，如，B类中有一个A类</li>
<li><ul>
<li>构造函数的执行顺序：先执行类中成员的构造函数，再执行外面类的构造函数。就是说，先执行A的，再执行B的</li>
<li>析构函数的执行顺序：先执行类外的析构函数，在执行类中成员的析构函数。就是说，先执行B的，在执行A的</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Phone</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    string m_pname;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string name, string p): <span class="built_in">m_name</span>(name),<span class="built_in">m_phone</span>(p)&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    string m_name;</span><br><span class="line">    Phone m_phone;         <span class="comment">//类中嵌套了一个类</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="string">&quot;asdsa&quot;</span>, <span class="string">&quot;sdasdd&quot;</span>);  </span><br><span class="line">    <span class="comment">//先执行的Phone的构造函数，再执行的Person的构造函数</span></span><br><span class="line">    <span class="comment">//先执行的Person的析构函数，在执行的Phone的析构函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><ul>
<li>静态成员变量</li>
<li><ul>
<li>特点：</li>
<li><ul>
<li>所有对象共享一份数据，就是说，不是某一个对象的数据，而是所有对象共享的，任意对象修改，都会更改其他对象，就是一块内存。</li>
<li>在编译阶段分配内存</li>
<li>类内声明，类外初始化，使用类的::域运算符在类外对静态成员变量初始化，而如果是私有访问权限的，不能这么初始化，可以使用成员函数进行初始化赋值</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>静态成员变量的访问方式</li>
<li><ul>
<li>通过对象的方式访问，就是正常的成员变量的访问方式</li>
<li>通过::运算符访问</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_a;          <span class="comment">//类内定义静态成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_a = <span class="number">10</span>;　　　　　<span class="comment">//静态成员变量初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p1.m_a = <span class="number">100</span>;             <span class="comment">//可以使用对象的方式访问</span></span><br><span class="line">    Person p2;</span><br><span class="line">    p2.m_a = <span class="number">200</span>;　　　<span class="comment">//因为共享一块数据，所以p2的修改也影响p1的值</span></span><br><span class="line">    cout &lt;&lt; Person::m_a &lt;&lt; endl;　<span class="comment">//可以使用::的方式访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>静态成员函数</li>
<li><ul>
<li>所有对象共享同一个函数</li>
<li>静态成员函数只能访问静态成员变量</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;    <span class="comment">//静态成员韩式</span></span><br><span class="line">        m_a = <span class="number">100</span>;　　　　　 <span class="comment">//只能访问静态成员变量</span></span><br><span class="line">        <span class="comment">//m_b = 200;       //不能访问普通成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_a;</span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_b = <span class="number">10</span>;　　　　<span class="comment">//静态成员变量的初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p1.<span class="built_in">func</span>();              <span class="comment">//普通的对象访问方式</span></span><br><span class="line">    Person::<span class="built_in">func</span>();　　　　　 <span class="comment">//使用::运算符访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="C-对象模型和this指针"><a href="#C-对象模型和this指针" class="headerlink" title="C++对象模型和this指针"></a>C++对象模型和this指针</h3><h4 id="成员变量和成员函数分开存储"><a href="#成员变量和成员函数分开存储" class="headerlink" title="成员变量和成员函数分开存储"></a>成员变量和成员函数分开存储</h4><ul>
<li>类的成员变量和成员函数分开存储</li>
<li>只有非静态成员变量才属于类的对象上，就是说只有普通的成员变量才在类的对象上</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;&#125;;        <span class="comment">//空对象，使用sizeof之后，会发现占用了1字节</span></span><br><span class="line">　　　　　　　　　　　　　　<span class="comment">//是编译器为空对象所占用的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_a;  　　　　　　<span class="comment">//普通的成员变量，sizeof之后为4</span></span><br><span class="line">&#125;;                      <span class="comment">//只有普通的成员变量才属于类的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_a;　　　　　　　<span class="comment">//sizeof之后还是为４</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_b;　　　<span class="comment">//静态成员变量，不属于类的对象</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_b;　　　<span class="comment">//sizeof之后还是为４</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;        <span class="comment">//成员函数，不属于类的对象</span></span><br><span class="line">&#125;;　　<span class="comment">//因为函数只有一份，各个对象都可能调用，不会在某一个单独的对象中</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_b;　　　<span class="comment">//sizeof之后还是为４</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;　　　　　<span class="comment">//静态成员函数，不属于类的对象</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="this指针的用途"><a href="#this指针的用途" class="headerlink" title="this指针的用途"></a>this指针的用途</h4><ul>
<li><strong>this指针指向被调用成员函数所属的对象</strong></li>
<li><ul>
<li>this指针是隐含每一个非静态成员函数内的一种指针</li>
<li>this指针不要定义，直接使用就行</li>
</ul>
</li>
<li>用途：</li>
<li><ul>
<li>当成员函数的形参与成员变量同名时，可用this指针用来区分</li>
<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//问题１：解决同名冲突</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)&#123;   <span class="comment">//非静态成员函数的形参与成员变量同名</span></span><br><span class="line">        <span class="comment">//age = age;　　//这时要赋值的时候，编译器就找不到这个值是那个</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;   <span class="comment">//可以使用this指针，指向p1的对象</span></span><br><span class="line">                           <span class="comment">//表示这个age是对象中的成员变量的age</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//问题２：返回对象本身</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Personaddage</span><span class="params">(Person &amp;p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age +=　p.age;　　　<span class="comment">//如果仅仅这么写，无法完成链式相加</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以使用返回this，实现链式编程</span></span><br><span class="line">    <span class="function">Person&amp; <span class="title">Personaddage</span><span class="params">(Person &amp;p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>      <span class="comment">//指的就是返回对象本身</span></span><br><span class="line">            　　　　　　　　 <span class="comment">//this指向对象，然后解引用，就是对象本身</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    p2.<span class="built_in">Personaddage</span>(p1);    <span class="comment">//对于问题２，我们想把两个对象的age相加</span></span><br><span class="line">    <span class="comment">//对于问题２，我们不止想加一次，怎么才能这样写：</span></span><br><span class="line">    p2.<span class="built_in">Personaddage</span>(p1).<span class="built_in">Personaddage</span>(p1).<span class="built_in">Personaddage</span>(p1);</span><br><span class="line">    <span class="comment">//这种是链式编程思想，下面用图表示一下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/18/LhIwin2qAFyaMSd.png" alt="image-20220313204931278"></p>
<h4 id="空指针访问成员函数"><a href="#空指针访问成员函数" class="headerlink" title="空指针访问成员函数"></a>空指针访问成员函数</h4><ul>
<li>空指针可以调用成员函数，但是需要注意在函数中是否使用this指针，实际上成员变量在函数中，编译器都会在前面添加一个this-&gt;</li>
<li>如果有使用this指针，需要在函数调用开头，进行判断</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPerson1</span><span class="params">()</span></span>&#123;           <span class="comment">//成员函数没有使用成员变量</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;asdad&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPerson2</span><span class="params">()</span></span>&#123;　　　　　　 <span class="comment">//成员函数使用了成员变量</span></span><br><span class="line">        cout &lt;&lt; m_age &lt;&lt; endl;　　 <span class="comment">//编译器会在age前自动添加this-&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPerson3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == <span class="literal">NULL</span>)&#123;          <span class="comment">//如果使用空指针指向对象</span></span><br><span class="line">            <span class="keyword">return</span>;　　　　　　　　　 <span class="comment">//就要进行判断</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person *p = <span class="literal">NULL</span>;        <span class="comment">//创建一个空指针，指向对象</span></span><br><span class="line">    p-&gt;<span class="built_in">showPerson1</span>();　　　　　<span class="comment">//调用成员函数，没有使用成员变量</span></span><br><span class="line">    　　　　　　　　　　　　　　　<span class="comment">//不会报错</span></span><br><span class="line">    <span class="comment">//p-&gt;showPerson2();　　　 //调用成员函数，使用了成员变量</span></span><br><span class="line">  　　<span class="comment">//会报错，因为这本来是个空指针，没有对象中的成员变量，</span></span><br><span class="line">    　<span class="comment">//这时候空指针找不到那个不存在的成员变量</span></span><br><span class="line">    p-&gt;<span class="built_in">showPerson3</span>();        <span class="comment">//所以，需要使用这个判断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="const修饰成员函数"><a href="#const修饰成员函数" class="headerlink" title="const修饰成员函数"></a>const修饰成员函数</h4><ul>
<li>常函数：</li>
<li><ul>
<li>成员函数后面加const，就是常函数</li>
<li>常函数内不可以修改成员变量</li>
<li>如果有特殊的成员变量需要常函数修改，需要在成员变量前加mutable（强制转换const）</li>
</ul>
</li>
<li>常对象</li>
<li><ul>
<li>声明对象前加const，就是常对象</li>
<li>常对象只能调用常函数（因为如果能够调用普通成员函数，而普通成员函数能够修改成员变量，那么const常对象就无意义了）</li>
<li>常对象依然可以修改mutable的成员变量</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shuwPerson</span><span class="params">()</span> <span class="type">const</span></span>&#123;   <span class="comment">//函数后面添加一个cosnt，就是常函数</span></span><br><span class="line">        <span class="comment">//m_a = 10;            //常函数中不能修改普通的成员变量</span></span><br><span class="line">        m_b = <span class="number">20</span>;              <span class="comment">//但是可以修改mutable的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> Person p;            <span class="comment">//声明对象之前加const，就是常对象</span></span><br><span class="line">    <span class="comment">//p.m_a = 100;　　　　　　 　//常对象不能修改成员变量</span></span><br><span class="line">    p.m_b = <span class="number">200</span>;               <span class="comment">//但是可以修改mutable的成员变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><ul>
<li>友元函数可以访问类中的私有成员</li>
</ul>
<h4 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">func</span><span class="params">(Person *p)</span></span>;   <span class="comment">//全局函数做友元</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_b;　　　　　　　　　　　　　　<span class="comment">//正常全局函数无法访问私有成员</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Person *p)</span></span>&#123;　　　　　　　　 <span class="comment">//全局函数声明放在类中做友元</span></span><br><span class="line">    p-&gt;m_a = <span class="number">10</span>;　　　　　　　　　　　　</span><br><span class="line">    p-&gt;m_b = <span class="number">20</span>;　　　　　　　　　　　 <span class="comment">//因此可以访问类中私有成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类做友元"><a href="#类做友元" class="headerlink" title="类做友元"></a>类做友元</h4><ul>
<li>类做友元，可以访问其他类中的私有成员</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;                    <span class="comment">//定义两个类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Phone</span>;　　　　　　<span class="comment">//使用友元</span></span><br><span class="line">    <span class="comment">//那么Phone类中的函数可以访问Person类中的私有成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="成员函数做友元"><a href="#成员函数做友元" class="headerlink" title="成员函数做友元"></a>成员函数做友元</h4><ul>
<li>类中成员函数做友元，访问另一个类中的私有成员</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Phone::show</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="comment">//如果没有Phone，编译器就会认为这是全局友元函数</span></span><br><span class="line">    <span class="comment">//这个show函数就可以访问Person类中的私有成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>C++笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记（三）类和对象2</title>
    <url>/2022/04/08/C++%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A12/</url>
    <content><![CDATA[<p>此C++系列的笔记，是根据黑马程序员的C++视频教程所写。这部分讲解的是类和对象的第二部分，包括重载、继承和多态</p>
<span id="more"></span>

<h3 id="C-运算符重载"><a href="#C-运算符重载" class="headerlink" title="C++运算符重载"></a>C++运算符重载</h3><ul>
<li>重新给那些已经有定义的运算符，设置新的定义</li>
<li>而原来运算符的定义依然不会修改，因此，就是重载</li>
</ul>
<h4 id="加号运算符重载"><a href="#加号运算符重载" class="headerlink" title="加号运算符重载"></a>加号运算符重载</h4><ul>
<li>实现两个自定义数据类型相加的运算</li>
<li>运算符重载可以发生函数重载，就是函数名称相同，参数不同</li>
<li>分别有两种方式：成员函数重载和全局函数重载</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设我们要将两个Person类的数据相加</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line">    <span class="comment">//成员函数的运算符重载</span></span><br><span class="line">    Person <span class="keyword">operator</span>+(Person &amp;p)&#123;   <span class="comment">//运算符+重载</span></span><br><span class="line">        Person temp;　　　　　　　　　<span class="comment">//这个函数的名字就是operator+</span></span><br><span class="line">        temp.m_a = <span class="keyword">this</span>-&gt;m_a + p.m_a;</span><br><span class="line">        temp.m_b = <span class="keyword">this</span>-&gt;m_b + p.m_b;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数的运算符重载</span></span><br><span class="line">Person <span class="keyword">operator</span>+(Person &amp;p1, Person &amp;p2)&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_a = p1.m_a + p2.m_a;</span><br><span class="line">    temp.m_b = p1.m_b + p2.m_b;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p1.m_a = <span class="number">20</span>;</span><br><span class="line">    p1.m_b = <span class="number">20</span>;</span><br><span class="line">    Person p2;</span><br><span class="line">    p2.m_a = <span class="number">10</span>;</span><br><span class="line">    p2.m_b = <span class="number">10</span>;</span><br><span class="line">    Person p3 = p1 + p2;    <span class="comment">//因为重载了+运算符，所以这里可以运行</span></span><br><span class="line">    <span class="comment">//其实，这里的计算时编译器其实改写了如下方式：</span></span><br><span class="line">    <span class="comment">//对于成员函数的运算符重载：</span></span><br><span class="line">    <span class="comment">//Person p3 = p1.operator+(p2);简化为p3=p1+p2</span></span><br><span class="line">    <span class="comment">//对于全局函数的运算符重载：</span></span><br><span class="line">    <span class="comment">//Person p3 = operator+(p1,p2);简化为p3=p1+p2</span></span><br><span class="line">    cout &lt;&lt; p3.m_a &lt;&lt; p3.m_b &lt;, endl;  <span class="comment">//输出都是３０</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/03/18/FhBsLrxWpwCkaHl.png" alt="image-20220314143339482"></p>
<h4 id="左移运算符重载"><a href="#左移运算符重载" class="headerlink" title="左移运算符重载"></a>左移运算符重载</h4><ul>
<li>左移符号是&lt;&lt;，就是cout &lt;&lt; 中的运算符</li>
<li>只能使用全局函数做重载，不能使用成员函数重载，因为会反了：平常都是cout &lt;&lt; p;如果使用成员函数重载，那么就变成p&lt;&lt;cout;反了</li>
<li>左移运算符重载，可以输出自定义数据类型</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设我们要cout &lt;&lt; p就能够将类中成员打印出来</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line">    <span class="comment">//如果这么写，那么调用的时候，就是p.operator&lt;&lt;(cout)</span></span><br><span class="line">    <span class="comment">//那么形成的就是p&lt;&lt;cout，就反了，因此只能使用全局函数的重载</span></span><br><span class="line">    <span class="comment">//void operator&lt;&lt;(Person &amp;p)&#123;&#125;;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//如果这么写，不能做成链式编程</span></span><br><span class="line"><span class="comment">//void operator&lt;&lt;(ostream &amp;out, Person &amp;p)&#123;</span></span><br><span class="line"><span class="comment">//返回cout本身，就能形成链式编程</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Person &amp;p)&#123;</span><br><span class="line">    <span class="comment">//如果类中的成员是私有的，那么我们可以将此函数设定为友元函数</span></span><br><span class="line">    out &lt;&lt; p.m_a &lt;&lt; p.m_b;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">//如果运算符重载函数不返回值，那么只能这么写，不能连续的写</span></span><br><span class="line">    cout &lt;&lt; p;</span><br><span class="line">    <span class="comment">//如果运算符重载函数返回了cout本身，那么就可以链式的编程</span></span><br><span class="line">    cout &lt;&lt; p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="递增运算符重载"><a href="#递增运算符重载" class="headerlink" title="递增运算符重载"></a>递增运算符重载</h4><ul>
<li>通过重载递增运算符，实现自己的整型数据++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设打印类中的整型数据递增</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInteger</span> &#123;</span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyInteger</span>() &#123;</span><br><span class="line">		m_Num = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	MyInteger&amp; <span class="keyword">operator</span>++() &#123;    <span class="comment">//前置++</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	MyInteger <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;  <span class="comment">//后置++,添加一个占位参数</span></span><br><span class="line">		<span class="comment">//先返回</span></span><br><span class="line">		MyInteger temp = *<span class="keyword">this</span>; <span class="comment">//记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；</span></span><br><span class="line">		m_Num++;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> m_Num;</span><br><span class="line">&#125;;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;</span><br><span class="line">	out &lt;&lt; myint.m_Num;　　　<span class="comment">//重载&lt;&lt;运算符</span></span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;　　　　　　　　<span class="comment">//前置++ 先++ 再返回</span></span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	cout &lt;&lt; ++myInt &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;　　　　　　　　<span class="comment">//后置++ 先返回 再++</span></span><br><span class="line">	MyInteger myInt;</span><br><span class="line">	cout &lt;&lt; myInt++ &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="赋值运算符重载"><a href="#赋值运算符重载" class="headerlink" title="赋值运算符重载"></a>赋值运算符重载</h4><ul>
<li>C++编译器至少会给一个类添加下面４个函数：</li>
<li><ul>
<li>默认构造函数（无参，函数体为空）</li>
<li>默认析构函数（无参，函数体为空）</li>
<li>默认拷贝构造函数，对成员变量进行值拷贝</li>
<li>赋值运算符operator=，对成员变量进行值拷贝（因此，也会出现浅拷贝的问题）</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设我们要实现一个对类的赋值操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(<span class="type">int</span> age)&#123;</span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">	&#125; </span><br><span class="line">	Person&amp; <span class="keyword">operator</span>=(Person &amp;p)&#123;　　　<span class="comment">//重载赋值运算符</span></span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//编译器提供的代码是浅拷贝</span></span><br><span class="line">		<span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line">		<span class="comment">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class="line">		m_Age = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_Age);</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;                 <span class="comment">//返回自身,实现链式编程</span></span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Person</span>()&#123;</span><br><span class="line">		<span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Age;</span><br><span class="line">			m_Age = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> *m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line">	p3 = p2 = p1; <span class="comment">//赋值操作</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; endl;　<span class="comment">//10</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; endl;　<span class="comment">//10</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; endl;  <span class="comment">//10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关系运算符重载"><a href="#关系运算符重载" class="headerlink" title="关系运算符重载"></a>关系运算符重载</h4><ul>
<li>就是重载==,!=这种运算符</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设我们对比两个类中成员是否相等</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>==(Person &amp; p)&#123;　　　<span class="comment">//重载==运算符</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">a</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">b</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (a == b)&#123;　　　　　　　　　　　　<span class="comment">//重载!=运算符也是相同的写法</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;a和b相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数调用运算符重载"><a href="#函数调用运算符重载" class="headerlink" title="函数调用运算符重载"></a>函数调用运算符重载</h4><ul>
<li>函数调用运算符()，也可以重载</li>
<li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li>
<li>仿函数没有固定写法，非常灵活</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string text)</span></span>&#123;    <span class="comment">//重载()运算符</span></span><br><span class="line">		cout &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line">	MyPrint myFunc;</span><br><span class="line">	<span class="built_in">myFunc</span>(<span class="string">&quot;hello world&quot;</span>);　　　<span class="comment">//会直接打印hello world</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载()运算符非常灵活，可以如下这么写：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAdd</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span></span>&#123;　　<span class="comment">//可以设置自己想要的功能</span></span><br><span class="line">		<span class="keyword">return</span> v1 + v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	MyAdd add;</span><br><span class="line">	<span class="type">int</span> ret = <span class="built_in">add</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//匿名对象调用  其中下面的MyAdd()就是匿名对象，没有名字的对象</span></span><br><span class="line">    <span class="comment">//执行完这行代码，匿名对象就释放了</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;MyAdd()(100,100) = &quot;</span> &lt;&lt; <span class="built_in">MyAdd</span>()(<span class="number">100</span>, <span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul>
<li>语法：<code>class 子类　：　继承方式　父类</code></li>
<li><ul>
<li>子类也叫派生类，父类也叫基类</li>
</ul>
</li>
<li>继承的好处：减少重复代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasePage</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Java</span> : <span class="keyword">public</span> BasePage&#123;   <span class="comment">//继承BasePage类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;　　　　　　　　　　　　　　　　 </span><br><span class="line">    <span class="comment">//就相当于把基类的成员复制粘贴到这里了，所以使用的时候，也是跟正常调用没有区别</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h4><p><img src="https://s2.loli.net/2022/03/18/EoQUHm2pOZ1VuSG.png" alt="image-20220314191720206"></p>
<ul>
<li>继承方式：</li>
<li><ul>
<li>公有继承：</li>
<li><ul>
<li>父类的公共成员-&gt;子类的公共成员</li>
<li>父类的保护成员-&gt;子类的保护成员</li>
<li>父类的私有成员x&gt;子类，不可访问</li>
</ul>
</li>
<li>保护继承：</li>
<li><ul>
<li>父类的公共成员-&gt;子类的保护成员</li>
<li>父类的保护成员-&gt;子类的保护成员</li>
<li>父类的私有成员x&gt;子类，不可访问</li>
</ul>
</li>
<li>私有继承：</li>
<li><ul>
<li>父类的公共成员-&gt;子类的私有成员</li>
<li>父类的保护成员-&gt;子类的私有成员</li>
<li>父类的私有成员x&gt;子类，不可访问</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="继承中的对象模型"><a href="#继承中的对象模型" class="headerlink" title="继承中的对象模型"></a>继承中的对象模型</h4><ul>
<li>从父类继承的成员，都有哪些属于子类中？　</li>
<li>答：都在子类中，而不可访问的部分成员，其实是编译器给隐藏了</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> m_C; <span class="comment">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base&#123;     <span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Son) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//得到１６，就是所有成员都被继承了，包括私有成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="构造和析构"><a href="#构造和析构" class="headerlink" title="构造和析构"></a>构造和析构</h4><ul>
<li>子类继承父类后，那么构造函数和析构函数的顺序是什么？</li>
<li>答：构造函数：先执行父类的，再执行子类的；析构函数：先执行子类的，再执行父类的</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base</span>()&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Base</span>()&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Son</span>()&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Son构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Son</span>()&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Son析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class="line">	Son s;        </span><br><span class="line">    <span class="comment">//尽管只创建了子类的对象，但是子类是继承于父类的，</span></span><br><span class="line">    <span class="comment">//所以父类也一定会创建新的对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="继承同名成员的处理"><a href="#继承同名成员的处理" class="headerlink" title="继承同名成员的处理"></a>继承同名成员的处理</h4><ul>
<li>就是当子类和父类出现了同名的成员时，需要怎么访问子类或者父类的同名数据</li>
<li><ul>
<li>访问子类同名成员，直接访问即可</li>
<li>访问父类同名成员，需要加作用域::</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base</span>()&#123;</span><br><span class="line">		m_A = <span class="number">100</span>;　　　　　</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;　　　　　　<span class="comment">//建立同名的成员函数</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base - func()调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;　　　<span class="comment">//建立同名的成员重载函数</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base - func(int a)调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_A;　　　　　　　　<span class="comment">//建立同名的成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Son</span>()&#123;</span><br><span class="line">		m_A = <span class="number">200</span>;　　　　<span class="comment">//与父类同名</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数，因此这时候父类中有同名的重载函数，也是不生效的</span></span><br><span class="line">	<span class="comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;　　　　　<span class="comment">//与父类同名</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Son - func()调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">    <span class="comment">//直接访问，就是访问的子类成员</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Son下的m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//加作用域::，就是访问对应作用域的成员</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Base下的m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line">	s.<span class="built_in">func</span>();</span><br><span class="line">	s.Base::<span class="built_in">func</span>();</span><br><span class="line">	s.Base::<span class="built_in">func</span>(<span class="number">10</span>)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="继承同名静态成员的处理"><a href="#继承同名静态成员的处理" class="headerlink" title="继承同名静态成员的处理"></a>继承同名静态成员的处理</h4><ul>
<li>大体上，跟非静态成员的处理相同</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Son - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问，跟非静态成员一样</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Son s;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//通过类名访问，因为静态成员是共享的，可以直接用类访问</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//这个特殊，需要注意</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//通过对象访问，跟非静态成员一样</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	Son s;</span><br><span class="line">	s.<span class="built_in">func</span>();</span><br><span class="line">	s.Base::<span class="built_in">func</span>();</span><br><span class="line">    </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">    <span class="comment">//就是说，必须要使用Base的作用域，否则，子类的func会隐藏父类的所有func函数（包括重载）</span></span><br><span class="line">    <span class="comment">//第一个作用域::符号指的是通过类名访问，第二个::符号指的是找父类中的func</span></span><br><span class="line">	Son::<span class="built_in">func</span>();</span><br><span class="line">	Son::Base::<span class="built_in">func</span>();</span><br><span class="line">	<span class="comment">//想找到父类中的func重载函数，需要要使用Base指定</span></span><br><span class="line">	Son::Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><ul>
<li>就是一个类，继承了多个父类</li>
<li>多继承可能会引发父类中同名成员的出现，需要加作用域区分</li>
<li>C++实际开发中不建议使用多继承</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设写好了两个父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_C;</span><br><span class="line">	<span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//多继承容易产生成员同名的情况</span></span><br><span class="line"><span class="comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Son s;</span><br><span class="line">    <span class="comment">//这个sizeof就是计算了所有父类和子类中的非静态 成员 变量的占用</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(s) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="菱形继承（面试）"><a href="#菱形继承（面试）" class="headerlink" title="菱形继承（面试）"></a>菱形继承（面试）</h4><ul>
<li>两个子类继承同一个夫类，又有某个类同时继承两个子类，这种继承被称为菱形继承，或者钻石继承</li>
<li>菱形继承的问题：</li>
<li><ul>
<li>数据的二义性，中间层的两个类，都继承了同一个类，就会都有同一个成员，在最底层的子类继承这两个中间层的类时，出现数据的二义性，就是分不清是哪个类的成员，可以使用作用域::区分</li>
<li>这份同名的数据，最底层的子类继承了两个同名的成员，但是实际上我们只需要一份，造成了资源浪费，可以使用虚继承</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="comment">//虚继承的底层思想:同名成员不再继承原来的数据，而是变为了一个指针，</span></span><br><span class="line"><span class="comment">//他们都指向了同一片区域，因此，虚继承就形成了只有一份数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tuo</span>   : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepTuo</span> : <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这是第一个问题，使用作用域就可以访问</span></span><br><span class="line">	SheepTuo st;</span><br><span class="line">	st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">	st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line">	<span class="comment">//如果使用了虚继承，那么此时底下输出的都是２００</span></span><br><span class="line">    <span class="comment">//因为使用虚继承后，实际上你访问的不管那个作用域，都是只有一份数据</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>多态分为两类</li>
<li><ul>
<li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li>
<li>动态多态: 派生类和虚函数实现运行时多态</li>
</ul>
</li>
<li>静态多态和动态多态区别：</li>
<li><ul>
<li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li>
<li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li>
</ul>
</li>
<li>多态满足条件：</li>
<li><ul>
<li>有继承关系</li>
<li>子类重写父类中的虚函数</li>
</ul>
</li>
<li>多态的使用：父类指针或者引用指向子类对象</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;　　　　　　　　<span class="comment">//子类重写虚函数，加不加virtual都行</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> :<span class="keyword">public</span> Animal&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;             <span class="comment">//子类重写虚函数，加不加virtual都行</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;小狗在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DoSpeak</span><span class="params">(Animal &amp; animal)</span></span>&#123;  <span class="comment">//这个函数的形参是父类对象</span></span><br><span class="line">	animal.<span class="built_in">speak</span>();　　　　　　　　<span class="comment">//但是实际上传入的实参是子类对象</span></span><br><span class="line">&#125;　　　　　　　　　　　　　　　　　　　<span class="comment">//满足多态的要求</span></span><br><span class="line"><span class="comment">//多态满足条件： </span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Cat cat;</span><br><span class="line">	<span class="built_in">DoSpeak</span>(cat);　　　　　<span class="comment">//想要调用cat对象的函数，就传入cat</span></span><br><span class="line">	Dog dog;</span><br><span class="line">	<span class="built_in">DoSpeak</span>(dog);        <span class="comment">//想要调用dog对象的函数，就传入dog</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>多态的底层理解（以上面的代码为例）</li>
</ul>
<ol>
<li>对于animal父类，如果没有加virtual，也就是说，没有虚函数只有普通成员函数，那么sizeof后就占用１字节，而使用了虚函数之后，就占用了４字节，因为虚函数的存在，使得父类产生了一个指针，指向了&amp;animal::speak（就是animal作用域下的speak函数的地址）</li>
<li>对于cat子类，如果没有重写父类中的虚函数（就是speak函数），那么就是一个普通的继承，会把指向了&amp;animal::speak（就是animal作用域下的speak函数的地址）继承过来。而重写了父类中的虚函数（就是speak函数），那么继承过来的指针，就会指向&amp;cat::speak（就是cat作用域下的speak函数的地址）</li>
<li>因此，形成了父类的指针或者引用指向了哪个子类的对象，那么程序就会运行哪个子类的对象，形成了多态。</li>
</ol>
<p><img src="https://s2.loli.net/2022/03/18/SXAZ7rjmgHCOh5D.png" alt="image-20220314205942163"></p>
<h4 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h4><ul>
<li>代码组织结构清晰</li>
<li>可读性强</li>
<li>利于前期和后期的扩展以及维护</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多态实现计算器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractCalculator</span>&#123;　　　<span class="comment">//抽象计算器类</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span>&#123;　</span><br><span class="line">        <span class="comment">//可以不写里面的东西，毕竟主要运行的都是后面要开发的部分</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> m_Num1;</span><br><span class="line">	<span class="type">int</span> m_Num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//加法计算器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddCalculator</span> :<span class="keyword">public</span> AbstractCalculator&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 + m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//减法计算器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubCalculator</span> :<span class="keyword">public</span> AbstractCalculator&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> m_Num1 - m_Num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//创建加法计算器</span></span><br><span class="line">    <span class="comment">//多态的条件：需要有父类的指针或者引用指向子类对象</span></span><br><span class="line">	AbstractCalculator *abc = <span class="keyword">new</span> AddCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span> abc;  <span class="comment">//用完了记得销毁</span></span><br><span class="line">	<span class="comment">//创建减法计算器</span></span><br><span class="line">	abc = <span class="keyword">new</span> SubCalculator;</span><br><span class="line">	abc-&gt;m_Num1 = <span class="number">10</span>;</span><br><span class="line">	abc-&gt;m_Num2 = <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; abc-&gt;m_Num2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; abc-&gt;<span class="built_in">getResult</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">delete</span> abc;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h4><ul>
<li>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容，因此可以将虚函数改为<strong>纯虚函数</strong></li>
<li>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></li>
<li>当类中只要有了纯虚函数，这个类就称为抽象类（可以有很多纯虚函数）</li>
<li>抽象类的特点：</li>
<li><ul>
<li>抽象类无法实例化对象，就是说不能创建对象</li>
<li>子类必须重写抽象类中的纯虚函数，否则该子类也属于抽象类</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//纯虚函数</span></span><br><span class="line">	<span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line">	<span class="comment">//抽象类无法实例化对象</span></span><br><span class="line">	<span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//其实这里就是接口了，就是我准备要写这个功能了，先占个坑</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;　　　<span class="comment">//子类的virtual写不写都行</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Base * base = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//base = new Base; 　　　　// 错误，抽象类无法实例化对象</span></span><br><span class="line">	base = <span class="keyword">new</span> Son;　　　　　　 <span class="comment">//父类的指针必须指向子类的对象</span></span><br><span class="line">	base-&gt;<span class="built_in">func</span>();　　　　　　　　<span class="comment">//形成多态</span></span><br><span class="line">	<span class="keyword">delete</span> base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="虚析构和纯虚析构"><a href="#虚析构和纯虚析构" class="headerlink" title="虚析构和纯虚析构"></a>虚析构和纯虚析构</h4><ul>
<li><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时<strong>无法调用到子类的析构代码</strong>，可以将父类的析构函数改为虚析构或者纯虚析构</p>
</li>
<li><p>虚析构的语法：<code>virtual ~类名()&#123;&#125;</code></p>
</li>
<li><p>纯虚析构的语法：声明：<code>virtual ~类名() = 0;</code>；实现：<code>类名::~类名()&#123;&#125;</code></p>
</li>
<li><p>虚析构和纯虚析构的特点：</p>
</li>
<li><ul>
<li>可以解决父类指针释放子类对象</li>
<li>都需要有具体的函数实现</li>
<li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Animal</span>()&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//析构函数加上virtual关键字，变成虚析构函数</span></span><br><span class="line">	<span class="comment">//virtual ~Animal()</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//虚析构和纯虚析构只能二选一</span></span><br><span class="line">    <span class="comment">//下面是纯虚析构，这只是声明，还需要有实现函数</span></span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//纯虚析构的实现函数</span></span><br><span class="line">Animal::~<span class="built_in">Animal</span>()&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Cat</span>(string name)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);　　　　<span class="comment">//把数据建立在堆区</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; *m_Name &lt;&lt;  <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Cat</span>()&#123;</span><br><span class="line">        <span class="comment">//如果只是使用普通的析构函数，这里是运行不到的</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> m_Name;</span><br><span class="line">			m_Name = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string *m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Animal *animal = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">	animal-&gt;<span class="built_in">Speak</span>();</span><br><span class="line">	<span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line">	<span class="comment">//怎么解决？给基类增加一个虚析构函数</span></span><br><span class="line">	<span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line">	<span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li>对文件操作需要包含的头文件<code>#include &lt;fstream&gt;</code></li>
<li>文件类型：</li>
<li><ul>
<li>文本文件：以文本的ASCII码形式储存在计算机中</li>
<li>二进制文件：以文本的二进制形式储存在计算机中，一般用户看不懂</li>
</ul>
</li>
<li>操作文件三大类：</li>
<li><ul>
<li>ofstream：写操作</li>
<li>ifstream：读操作</li>
<li>fstream：读写操作</li>
</ul>
</li>
</ul>
<h4 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h4><ul>
<li>写文件步骤：</li>
<li><ul>
<li>包含头文件：<code>#include&lt;fstream&gt;</code></li>
<li>创建流对象：<code>ofstream ofs;</code></li>
<li>打开文件：<code>ofs.open(&quot;文件路径&quot;,打开方式);</code></li>
<li>写数据：<code>ofs &lt;&lt; &quot;写入的数据&quot;;</code></li>
<li>关闭文件：<code>ofs.close();</code></li>
</ul>
</li>
<li>文件打开方式：</li>
<li><ul>
<li>可以多个方式一起使用：如<code>ios::binary | ios::out</code></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>打开方式</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>ios::in</td>
<td>为读文件而打开文件</td>
</tr>
<tr>
<td>ios::out</td>
<td>为写文件而打开文件</td>
</tr>
<tr>
<td>ios::ate</td>
<td>打开文件后，直接指向文件尾</td>
</tr>
<tr>
<td>ios::app</td>
<td>在文件最后追加的方式写文件</td>
</tr>
<tr>
<td>ios::trunc</td>
<td>如果文件存在则先删除，再创建</td>
</tr>
<tr>
<td>ios::binary</td>
<td>二进制方式</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>    <span class="comment">//添加头文件</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ofstream ofs;　　　<span class="comment">//创建流对象</span></span><br><span class="line">	ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::out);　　<span class="comment">//打开文件</span></span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; endl;　　　　　<span class="comment">//写数据</span></span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; endl;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; endl;</span><br><span class="line">	ofs.<span class="built_in">close</span>();　　　　　　　　　　　　　　<span class="comment">//关闭文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>读文件步骤：</li>
<li><ul>
<li>包含头文件：<code>#include&lt;fstream&gt;</code></li>
<li>创建流对象：<code>ifstream ifs;</code></li>
<li>打开文件：<code>ifs.open(&quot;文件路径&quot;,打开方式);</code></li>
<li>读数据：四种方式</li>
<li>关闭文件：<code>ifs.close();</code></li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span>              <span class="comment">//包含头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ifstream ifs;　　　　　　　　　<span class="comment">//创建流对象</span></span><br><span class="line">	ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);　　<span class="comment">//打开文件</span></span><br><span class="line">    <span class="comment">//判断是否打开文件，is_open()判断文件是否打开，返回bool类型</span></span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())&#123;　　　　　</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//第一种方式</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs &gt;&gt; buf)&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//第二种</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;　　　　这是char类型</span></span><br><span class="line">    <span class="comment">//getline()获取一行数据</span></span><br><span class="line">    <span class="comment">//ifs.getline(读取数据存放处，多大)</span></span><br><span class="line">	<span class="comment">//while (ifs.getline(buf,sizeof(buf)))&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//第三种</span></span><br><span class="line">	<span class="comment">//string buf;　　　　　　　　　　　这是string类型</span></span><br><span class="line">	<span class="comment">//while (getline(ifs, buf))&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">    <span class="comment">//ifs.get()一个字符一个字符获取文件数据</span></span><br><span class="line">    <span class="comment">//EOF指的是文件末尾，end of file</span></span><br><span class="line">	<span class="keyword">while</span> ((c = ifs.<span class="built_in">get</span>()) != EOF)&#123;</span><br><span class="line">		cout &lt;&lt; c;</span><br><span class="line">	&#125;</span><br><span class="line">	ifs.<span class="built_in">close</span>();                  <span class="comment">//关闭文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><ul>
<li>写文件主要使用流对象成员函数write</li>
<li><ul>
<li>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></li>
<li>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设我们将一个类数据放入二进制文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//二进制文件  写文件</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//创建输出流对象</span></span><br><span class="line">    <span class="comment">//可以像如下这种，创建流对象时直接打开文件</span></span><br><span class="line">    <span class="comment">//也可以一步一步来，像文本文件那样</span></span><br><span class="line">	<span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line">	<span class="comment">//打开文件</span></span><br><span class="line">	<span class="comment">//ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);</span></span><br><span class="line">	Person p = &#123;<span class="string">&quot;张三&quot;</span>  , <span class="number">18</span>&#125;;</span><br><span class="line">	<span class="comment">//写文件</span></span><br><span class="line">	ofs.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span> *)&amp;p, <span class="built_in">sizeof</span>(p));</span><br><span class="line">	<span class="comment">//关闭文件</span></span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>读文件主要使用流对象成员函数read</li>
<li><ul>
<li>函数原型：<code>istream&amp; read(char *buffer,int len);</code></li>
<li>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设我们按照类的结构读取二进制文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建流对象并打开</span></span><br><span class="line">	<span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;person.txt&quot;</span>, ios::in | ios::binary)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>())&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	Person p;</span><br><span class="line">    <span class="comment">//按照类的结构读取数据</span></span><br><span class="line">	ifs.<span class="built_in">read</span>((<span class="type">char</span> *)&amp;p, <span class="built_in">sizeof</span>(p));　　</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>C++笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记（二）核心编程</title>
    <url>/2022/04/08/C++%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>此C++系列的笔记，是根据黑马程序员的C++视频教程所写。核心编程包括的是C++中的基础东西</p>
<span id="more"></span>

<h3 id="内存分区模型"><a href="#内存分区模型" class="headerlink" title="内存分区模型"></a>内存分区模型</h3><ul>
<li>代码区：存放函数体的二进制代码，由操作系统管理（存放CPU执行的机器指令）（程序运行前就有了）</li>
<li><ul>
<li>共享：由于会频繁的被执行，因此代码只需要存放一份共享</li>
<li>只读：防止程序意外修改内部指令</li>
</ul>
</li>
<li>全局区：存放全局变量、静态变量和常量（字符串常量和const修饰的全局变量）（程序运行前就有了）</li>
<li><ul>
<li>注：const修饰的局部变量（局部常量）不在全局区中</li>
</ul>
</li>
<li>栈区：有编译器分配释放，存放函数的参数和局部变量等</li>
<li><ul>
<li>注：在函数体中，不要返回局部变量的地址，因为函数执行完，在栈区的局部变量会自动释放，此时返回局部变量的地址可能会返回一个乱码</li>
</ul>
</li>
<li>堆区：由程序员分配释放，若不释放，在程序结束时由操作系统回收。</li>
<li><ul>
<li>注：可以使用new关键字在堆区创建变量（因此，在上面栈区的注意事项中，可以在函数体的变量中用new关键字（new返回的是指针，就是地址）在堆区创建变量，那么可以返回函数中的局部变量）</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//new、delete关键字的使用</span></span><br><span class="line"><span class="function"><span class="type">double</span> * <span class="title">func</span><span class="params">()</span></span>&#123;          <span class="comment">//返回double类型的指针</span></span><br><span class="line">    <span class="type">double</span> * p = <span class="keyword">new</span> <span class="built_in">double</span>(<span class="number">10.0</span>);  <span class="comment">//用new创建一个double类型的数据10.0</span></span><br><span class="line">                                    <span class="comment">//new返回的是该数据类型的指针</span></span><br><span class="line">    <span class="keyword">return</span> p;                       <span class="comment">//这样使用new将数据创建在堆区中，堆区是我们自己管理，因</span></span><br><span class="line">                                    <span class="comment">//此可以返回后不会释放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> * a = <span class="built_in">func</span>();  <span class="comment">//使用指正接受返回值</span></span><br><span class="line">    cout &lt;&lt; *a &lt;&lt; endl;   <span class="comment">//输出10.0</span></span><br><span class="line">    <span class="keyword">delete</span> p;             <span class="comment">//手动释放这块堆区内存</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; *a &lt;&lt; endl; //这时候访问返回的指针就是非法访问，会报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> * arry = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>]   <span class="comment">//使用new创建一个数组，数组空间是10，就是10个数的数组</span></span><br><span class="line">                               <span class="comment">//注意定义数组使用的[]和上面定义变量使用的()</span></span><br><span class="line">    cout &lt;&lt; arry[<span class="number">9</span>] &lt;&lt; endl;   <span class="comment">//这时候直接输出数组的第10个数值是没有数值的，就是这时候没有</span></span><br><span class="line">                               <span class="comment">//定义这个数组中的数值都是什么，可以用for循环给数组赋值</span></span><br><span class="line">    <span class="keyword">delete</span>[] arry;             <span class="comment">//注意释放数组使用的[]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul>
<li>引用就是给一个变量起了一个别名，这个别名与原名是一块内存，因此可以互相修改改变内存值</li>
<li><ul>
<li>引用的本质就是指针常量（指针的指向不可以改变），因此初始化后不可以再改变</li>
<li>语法：数据类型 &amp;别名 = 原名</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;           <span class="comment">//定义一个变量</span></span><br><span class="line"><span class="type">int</span> &amp;b = a;           <span class="comment">//使用引用&amp;，这样b就是a的别名</span></span><br><span class="line">b = <span class="number">20</span>;               <span class="comment">//这是对b进行操作，就是对a进行操作，a的值也会改变</span></span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li><p>引用必须初始化 <code>int &amp;b    //这是错误的</code></p>
</li>
<li><ul>
<li>引用在初始化之后不可以改变<code>b = c     //b作为a的引用，不可以改变为其他的变量c的引用</code></li>
</ul>
</li>
<li><p>引用作为函数参数</p>
</li>
<li><ul>
<li>可以用引用的技术让形参修饰实参，达到简化指针修改实参的效果</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;        <span class="comment">//使用值传递的方式</span></span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap2</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span>&#123;      <span class="comment">//使用地址传递的方式</span></span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap3</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;      <span class="comment">//使用引用作为形参的方式</span></span><br><span class="line">    <span class="type">int</span> temp = a;                  <span class="comment">//写法跟值传递的方式一样，但是实现效果跟地址传递一样</span></span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">myswap1</span>();                      <span class="comment">//值传递不会修改实参的值</span></span><br><span class="line">    <span class="built_in">myswap2</span>();                      <span class="comment">//地址传递可以修改实参的值</span></span><br><span class="line">    <span class="built_in">myswap3</span>();                      <span class="comment">//使用引用可以修改实参的值</span></span><br><span class="line">    								<span class="comment">//因为引用的别名跟原名使用的同一块内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="引用做函数返回值"><a href="#引用做函数返回值" class="headerlink" title="引用做函数返回值"></a>引用做函数返回值</h4><ul>
<li>引用不可以作为局部变量的返回值</li>
<li>使用引用作为函数的返回值时，函数的调用可以作为左值（就是说可以给这个函数的返回值赋值）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a = <span class="number">20</span>;             <span class="comment">//这是创建在全局区的变量，在函数执行完之后不会被释放。</span></span><br><span class="line">    							   <span class="comment">//因此可以作为返回值返回</span></span><br><span class="line">    <span class="comment">//int a = 10;                  //这是创建在栈区的局部变量，在函数执行完之后会被释放</span></span><br><span class="line">                                   <span class="comment">//因此不可以作为返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>&amp; ref = <span class="built_in">func</span>();             <span class="comment">//需要使用引用的变量接收函数的返回值</span></span><br><span class="line">    <span class="built_in">func</span>() = <span class="number">1000</span>;                 <span class="comment">//引用的作为返回值的函数可以作为左值，成为被赋值的乙方</span></span><br><span class="line">    cout &lt;&lt; ref &lt;&lt; endl;           <span class="comment">//这时，ref输出的就是1000了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h4><ul>
<li>为了防止函数中误操作形参导致实参修改的情况（跟const在函数中的使用一样）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span>&#123;        <span class="comment">//用引用作为形参，防止函数修改此形参添加const</span></span><br><span class="line">    <span class="comment">//a = 100;                  //因为形参a加了const，所以这里不可以修改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> &amp;ref = <span class="number">10</span>;        <span class="comment">//这句可以运行，虽然并没有制定引用的原名是什么</span></span><br><span class="line">    							<span class="comment">//这句在编译时，会自动修改为两句：</span></span><br><span class="line">    							<span class="comment">//int temp = 10;  const int &amp;ref = temp;</span></span><br><span class="line">    ref = <span class="number">20</span>;                   <span class="comment">//可以直接对引用操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数高级"><a href="#函数高级" class="headerlink" title="函数高级"></a>函数高级</h3><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><ul>
<li>如果有我们自己传入的数据，那么就用自己的数据，如果没有，就用默认值</li>
<li>注：如果某个位置已经有了默认参数，那么这个位置之后，都必须有默认值</li>
<li>注：函数的声明和实现只能有一个有默认参数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>, <span class="type">int</span> c = <span class="number">20</span>)</span></span>&#123;        <span class="comment">//b有默认值，那么c必须也要有默认值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用时：</span></span><br><span class="line"><span class="built_in">func1</span>(<span class="number">10</span>);　　　　　　　　　　　　　　　　　　　　　　　<span class="comment">//因为有默认值，可以不输入带有默认值的参数</span></span><br><span class="line"><span class="built_in">func1</span>(<span class="number">10</span>,<span class="number">20</span>);　　　　　　　　　　　　　　　　　　　　　 <span class="comment">//也可以输入带有默认参数的值，b为20 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">20</span>)</span></span>;              <span class="comment">//函数的默认参数在声明和实现只有一个存在</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;　　　　　　　　　　　　　　　<span class="comment">//函数的声明有默认参数，实现就不需要了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="占位参数"><a href="#占位参数" class="headerlink" title="占位参数"></a>占位参数</h4><ul>
<li>语法：　返回值类型　函数名（数据类型）　｛｝</li>
<li>占位参数可以有默认参数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>)</span></span>&#123;&#125;             <span class="comment">//形参中的int，就是占位参数</span></span><br><span class="line">   　　　　　　　　　　　　　　　　　　　　 <span class="comment">//后面会用到这个占位参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> = <span class="number">10</span>)</span></span>&#123;&#125;　　　　 <span class="comment">//占位参数可以有默认参数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>,<span class="number">10</span>);　　　　　　　　　　　　　<span class="comment">//占位参数没有变量，但是依然需要传入参数</span></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><ul>
<li>可以让函数名相同，提高复用性</li>
<li>函数重载的条件</li>
<li><ul>
<li>同一个作用域下</li>
<li>函数名称相同</li>
<li>函数的参数类型（int和const int也是不同的）不同，或者数量不同或者，顺序不同</li>
<li>返回值的类型不同不能作为函数重载的条件（换句话说，函数名可以相同，但是要根据参数让编译器分辨出你要执行的是那个函数）</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;　　　　　　　　　　　　 <span class="comment">//函数重载名称可以相同，但是参数不能相同</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a, <span class="type">int</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a, <span class="type">int</span> b)</span></span>&#123;&#125;        <span class="comment">//不能将返回值作为重载的条件，因为编译器识别不出来</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>();　　　　　　　　　　　　　　 <span class="comment">//执行的时候编译器会根据参数的不同使用不同的函数</span></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10.0</span>,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数重载注意事项</li>
<li><ul>
<li>引用作为重载的条件</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span></span>&#123;&#125;                 <span class="comment">//引用作为重载</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">func</span>(a);　　　　　　　　　　　　　　　<span class="comment">//这句会运行第一个函数，因为a是一个变量</span></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>);　　　　　　　　　　　　　　<span class="comment">//这句会运行第二个函数</span></span><br><span class="line">    <span class="comment">//对第一个函数来说，实参给到形参相当于int &amp;a = 10，不合法</span></span><br><span class="line">   　<span class="comment">//对第二个函数来说，实参给到形参相当于const int &amp;a = 10，合法，在引用那里找，这句是合法的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>函数重载碰到默认参数</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>)</span></span>&#123;&#125;       <span class="comment">//尽量避免使用带有默认参数的函数重载</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>,<span class="number">20</span>);　　　　　　　　　　　　　<span class="comment">//可以运行</span></span><br><span class="line">    <span class="built_in">func</span>(<span class="number">10</span>);　　　　　　　　　　　　　　　<span class="comment">//会出错，编译器不知道你要运行哪个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>C++笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记（五）STL-容器</title>
    <url>/2022/04/08/C++%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89STL%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p>此C++系列的笔记，是根据黑马程序员的C++视频教程所写。这部分是STL的基本知识和一些基本容器讲解，是C++实际应用过程中最常用的部分</p>
<span id="more"></span>

<h3 id="STL初识"><a href="#STL初识" class="headerlink" title="STL初识"></a>STL初识</h3><h4 id="STL基本概念"><a href="#STL基本概念" class="headerlink" title="STL基本概念"></a>STL基本概念</h4><ul>
<li>STL(Standard Template Library,<strong>标准模板库</strong>)</li>
<li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li>
</ul>
<h4 id="STL六大组件"><a href="#STL六大组件" class="headerlink" title="STL六大组件"></a>STL六大组件</h4><ul>
<li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li>
<li>算法：各种常用的算法，如sort、find、copy、for_each等</li>
<li>迭代器：扮演了容器与算法之间的胶合剂。</li>
<li>仿函数：行为类似函数，可作为算法的某种策略。</li>
<li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li>
<li>空间配置器：负责空间的配置与管理。</li>
</ul>
<h4 id="容器、算法、迭代器"><a href="#容器、算法、迭代器" class="headerlink" title="容器、算法、迭代器"></a>容器、算法、迭代器</h4><ul>
<li>容器：将一些广泛使用的数据结构实现出来</li>
<li><ul>
<li>序列式容器：每个元素都有固定的位置（我们现在接触的大部分都是这样），怎么定义的就怎么存放（顺序存放）</li>
<li>关联式容器：二叉树结构，各元素之间没有严格的物理顺序关系（存放的顺序可能自动排序的方式存放）</li>
</ul>
</li>
<li>算法：</li>
<li><ul>
<li>质变算法：运算过程中会更改区间的元素内容。拷贝、替换、删除等操作</li>
<li>非质变算法：运算过程中不会更改区间的元素内容。查找、技术、遍历等操作</li>
</ul>
</li>
<li>迭代器：提供一种方法，能够访问到某个容器中的各个元素</li>
<li><ul>
<li>非常类似于指针</li>
</ul>
</li>
</ul>
<h3 id="容器算法迭代器初识"><a href="#容器算法迭代器初识" class="headerlink" title="容器算法迭代器初识"></a>容器算法迭代器初识</h3><h4 id="vector存放内置数据类型"><a href="#vector存放内置数据类型" class="headerlink" title="vector存放内置数据类型"></a>vector存放内置数据类型</h4><ul>
<li>容器：<code>vector</code></li>
<li>算法：<code>for_each</code></li>
<li>迭代器：<code>vector&lt;int&gt;::iterator</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//使用for_each算法时，会调用下面的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建vector容器对象，并通过模板参数指定容器的数据类型</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="comment">//向容器存放数据</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">    <span class="comment">//迭代器的类型vector&lt;int&gt;::iterator，用来定义vector迭代器</span></span><br><span class="line">    <span class="comment">//使用了v.begin()迭代器，指向了容器中的第一个数据</span></span><br><span class="line">    <span class="comment">//使用了v.end()迭代器，指向了容器中的最后一个数据的下一个位置</span></span><br><span class="line">    <span class="comment">//所以说，跟指针很像</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator pBegin = v.<span class="built_in">begin</span>();</span><br><span class="line">    vertor&lt;<span class="type">int</span>&gt;::iterator pEnd = v.<span class="built_in">end</span>();</span><br><span class="line">    <span class="comment">//第一种遍历方式：</span></span><br><span class="line">    <span class="keyword">while</span>(pBegin != pEnd)&#123;</span><br><span class="line">        cout &lt;&lt; *pBegin &lt;&lt; endl;   <span class="comment">//解引用</span></span><br><span class="line">        pBegin++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种遍历方式：</span></span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>();it != v.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三种遍历方式：使用for_each算法</span></span><br><span class="line">    <span class="comment">//数组的开头，数组的结尾，回调的函数</span></span><br><span class="line">    for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),myPrint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="vector存放自定义数据类型"><a href="#vector存放自定义数据类型" class="headerlink" title="vector存放自定义数据类型"></a>vector存放自定义数据类型</h4><ul>
<li>vector容器可以嵌套　<code>vector&lt;vector&lt;int&gt;&gt; v</code></li>
<li><ul>
<li>嵌套之后，注意解引用，解引用解的第一层还是个容器，而第二层解引用才解到了数据，因此，需要双层循环才能看到数据</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) &#123;</span><br><span class="line">		mName = name;</span><br><span class="line">		mAge = age;</span><br><span class="line">	&#125;</span><br><span class="line">	string mName;</span><br><span class="line">	<span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//存放对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	<span class="comment">//创建数据</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">	v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">	<span class="comment">//使用for循环遍历数据</span></span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="comment">//下面的*it是解引用，看&lt;&gt;中是什么，解引用解出来就是什么</span></span><br><span class="line">        <span class="comment">//如果不适用解引用，那么it可以当做指针来使用</span></span><br><span class="line">        <span class="comment">//下面两行一样的功能</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Name:&quot;</span> &lt;&lt; (*it).mName &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Name:&quot;</span> &lt;&lt; it-&gt;mName &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存放对象指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//&lt;&gt;中存放指针</span></span><br><span class="line">	vector&lt;Person*&gt; v;</span><br><span class="line">	<span class="comment">//创建数据</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">	v.<span class="built_in">push_back</span>(&amp;p1);</span><br><span class="line">	v.<span class="built_in">push_back</span>(&amp;p2);</span><br><span class="line">	v.<span class="built_in">push_back</span>(&amp;p3);</span><br><span class="line">    <span class="comment">//使用for循环遍历</span></span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Person*&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="comment">//*it解引用，看&lt;&gt;中是什么，这里的解引用解出来就是指针</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Name:&quot;</span> &lt;&lt; (*it)-&gt;mName &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="string容器"><a href="#string容器" class="headerlink" title="string容器"></a>string容器</h3><ul>
<li>string实际上是一个类，因此有很多的成员函数（后续会讲）</li>
</ul>
<h4 id="string构造函数"><a href="#string构造函数" class="headerlink" title="string构造函数"></a>string构造函数</h4><ul>
<li>构造函数原型：</li>
<li><ul>
<li><code>string();</code> 创建一个空的字符串</li>
<li><code>string(const char* s);</code> 使用字符串s初始化</li>
<li><code>string(const string&amp; str);</code> 使用一个string对象初始化另一个string对象</li>
<li><code>string(int n, char c);</code> 使用n个字符c进行初始化</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//string构造</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建空字符串，调用无参构造函数</span></span><br><span class="line">	string s1; </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//把const char*转换成了string</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="function">string <span class="title">s2</span><span class="params">(str)</span></span>; </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//调用拷贝构造函数,用一个string对象创建另一个string对象</span></span><br><span class="line">	<span class="function">string <span class="title">s3</span><span class="params">(s2)</span></span>; </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">　　 <span class="comment">//输出１０个ａ</span></span><br><span class="line">	<span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string赋值"><a href="#string赋值" class="headerlink" title="string赋值"></a>string赋值</h4><ul>
<li>赋值的函数模型：</li>
<li><ul>
<li><code>string&amp; operator=(const char* s);</code> char*类型字符串赋值给当前的字符串</li>
<li><code>string&amp; operator=(const string &amp;s);</code> 把字符串s赋给当前的字符串</li>
<li><code>string&amp; operator=(char c);</code> 字符赋值给当前的字符串</li>
<li><code>string&amp; assign(const char *s);</code> 把字符串s赋给当前的字符串</li>
<li><code>string&amp; assign(const char *s, int n);</code>  <strong>*把字符串s的前n个字符赋给当前的字符串</strong></li>
<li><code>string&amp; assign(const string &amp;s);</code> 把字符串s赋给当前字符串</li>
<li><code>string&amp; assign(int n, char c);</code> <strong>用n个字符c赋给当前字符串</strong></li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值,与上面一一对应</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//char*字符串赋值给当前</span></span><br><span class="line">	string str1;</span><br><span class="line">	str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">　　 <span class="comment">//字符串赋值给另一个字符串</span></span><br><span class="line">	string str2;</span><br><span class="line">	str2 = str1;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//char字符赋值字符串</span></span><br><span class="line">	string str3;</span><br><span class="line">	str3 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//使用assign赋值给str4字符串</span></span><br><span class="line">	string str4;</span><br><span class="line">	str4.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str4 = &quot;</span> &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//给str5赋值前五个字符</span></span><br><span class="line">	string str5;</span><br><span class="line">	str5.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>,<span class="number">5</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str5 = &quot;</span> &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//使用assign将字符串赋值给另一个字符串</span></span><br><span class="line">	string str6;</span><br><span class="line">	str6.<span class="built_in">assign</span>(str5);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str6 = &quot;</span> &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//给str7赋值五个x字符</span></span><br><span class="line">	string str7;</span><br><span class="line">	str7.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str7 = &quot;</span> &lt;&lt; str7 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h4><ul>
<li>就是在字符串的末尾拼接其他字符串</li>
<li>函数原型</li>
<li><ul>
<li><code>string&amp; operator+=(const char* str);</code> 重载+=操作符</li>
<li><code>string&amp; operator+=(const char c);</code> 重载+=操作符</li>
<li><code>string&amp; operator+=(const string&amp; str);</code> 重载+=操作符</li>
<li><code>string&amp; append(const char *s);</code>字符串s连接到当前字符串结尾</li>
<li><code>string&amp; append(const char *s, int n);</code>   <strong>*把字符串s的前n个字符连接到当前字符串结尾</strong></li>
<li><code>string&amp; append(const string &amp;s);</code> 也是拼接字符串</li>
<li><code>string&amp; append(const string &amp;s, int pos, int n);</code> <strong>字符串s从pos开始的n个字符连接到字符串结尾</strong></li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串拼接，按照如上的顺序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string str1 = <span class="string">&quot;我&quot;</span>;</span><br><span class="line">	str1 += <span class="string">&quot;爱玩游戏&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	str1 += <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	string str2 = <span class="string">&quot;LOL DNF&quot;</span>;</span><br><span class="line">	str1 += str2;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	string str3 = <span class="string">&quot;I&quot;</span>;</span><br><span class="line">	str3.<span class="built_in">append</span>(<span class="string">&quot; love &quot;</span>);</span><br><span class="line">    <span class="comment">//把字符串的前４个字符拼接到str3</span></span><br><span class="line">	str3.<span class="built_in">append</span>(<span class="string">&quot;game abcde&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">	str3.<span class="built_in">append</span>(str2);</span><br><span class="line">	<span class="comment">// 从str2的下标4位置开始，截取3个字符，拼接到字符串末尾</span></span><br><span class="line">    str3.<span class="built_in">append</span>(str2, <span class="number">4</span>, <span class="number">3</span>); </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string查找和替换"><a href="#string查找和替换" class="headerlink" title="string查找和替换"></a>string查找和替换</h4><ul>
<li>查找：查找字符串是否存在，注意参数有默认值</li>
<li>find是从左往右找，rfind是从右往左找，但是返回的都是下标</li>
<li><ul>
<li><code>int find(const string&amp; str, int pos = 0) const;</code> 查找str第一次出现位置,从pos开始查找</li>
<li><code>int find(const char* s, int pos = 0) const;</code>  查找s第一次出现位置,从pos开始查找</li>
<li><code>int find(const char* s, int pos, int n) const;</code> 从pos位置查找s的前n个字符第一次位置</li>
<li><code>int find(const char c, int pos = 0) const;</code> 查找字符c第一次出现位置</li>
<li><code>int rfind(const string&amp; str, int pos = npos) const;</code> 查找str最后一次位置,从pos开始查找</li>
<li><code>int rfind(const char* s, int pos = npos) const;</code> 查找s最后一次出现位置,从pos开始查找</li>
<li><code>int rfind(const char* s, int pos, int n) const;</code> 从pos查找s的前n个字符最后一次位置</li>
<li><code>int rfind(const char c, int pos = 0) const;</code> 查找字符c最后一次出现位置</li>
</ul>
</li>
<li>替换：在指定的位置替换字符串</li>
<li><ul>
<li><code>string&amp; replace(int pos, int n, const string&amp; str);</code> 替换从pos开始n个字符为字符串str</li>
</ul>
</li>
<li><ul>
<li><code>string&amp; replace(int pos, int n,const char* s);</code>                 //替换从pos开始的n个字符为字符串s</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找和替换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//查找</span></span><br><span class="line">	string str1 = <span class="string">&quot;abcdefgde&quot;</span>;</span><br><span class="line">    <span class="comment">//返回的下标，因此返回的３</span></span><br><span class="line">	<span class="type">int</span> pos = str1.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (pos == <span class="number">-1</span>)&#123;　　　　　　<span class="comment">//没找到就返回-1</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;未找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//rfind从右往左找，但是返回的是下标，因此返回７</span></span><br><span class="line">	pos = str1.<span class="built_in">rfind</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;pos = &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//从str1的第一个位置起往后的３个字符替换成1111</span></span><br><span class="line">    <span class="comment">//注意，是1111把bcd替换了，因此结果是a1111efgde</span></span><br><span class="line">	string str1 = <span class="string">&quot;abcdefgde&quot;</span>;</span><br><span class="line">	str1.<span class="built_in">replace</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;1111&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string字符串比较"><a href="#string字符串比较" class="headerlink" title="string字符串比较"></a>string字符串比较</h4><ul>
<li>比较两个字符串是否相等，是进行ASCII值进行比较</li>
<li><ul>
<li>相等，返回0</li>
<li>大于，返回1（一般只是比较两个字符串是否相同，大小无意义）</li>
<li>小于，返回-1（一般只是比较两个字符串是否相同，大小无意义）</li>
</ul>
</li>
<li>函数原型：</li>
<li><ul>
<li><code>int compare(const string &amp;s) const;</code>  与字符串s比较</li>
<li><code>int compare(const char *s) const;</code>  与字符串s比较</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串比较</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//是对每个字符一个一个进行对比</span></span><br><span class="line">	string s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	string s2 = <span class="string">&quot;aello&quot;</span>;</span><br><span class="line">	<span class="type">int</span> ret = s1.<span class="built_in">compare</span>(s2);</span><br><span class="line">	<span class="keyword">if</span> (ret == <span class="number">0</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;s1 等于 s2&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (ret &gt; <span class="number">0</span>)&#123;　　<span class="comment">//h的ASCII值大于a的，因此运行这</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;s1 大于 s2&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;s1 小于 s2&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h4><ul>
<li>读取或者存放字符串的方式：</li>
<li><ul>
<li><code>char&amp; operator[](int n);</code>  通过[]方式取字符（就是普通的Ｃ语言存取字符串的方式）</li>
<li><code>char&amp; at(int n);</code>  通过at方法获取字符</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="comment">//使用[]方式读取</span></span><br><span class="line">		cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="comment">//使用at方式读取</span></span><br><span class="line">		cout &lt;&lt; str.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//字符存取（修改）</span></span><br><span class="line">	str[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">	str.<span class="built_in">at</span>(<span class="number">1</span>) = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string插入和删除"><a href="#string插入和删除" class="headerlink" title="string插入和删除"></a>string插入和删除</h4><ul>
<li>函数原型</li>
<li><ul>
<li><code>string&amp; insert(int pos, const char* s);</code>在pos位置插入字符串</li>
<li><code>string&amp; insert(int pos, const string&amp; str);</code> 在pos位置插入字符串</li>
<li><code>string&amp; insert(int pos, int n, char c);</code> 在pos位置插入n个字符c</li>
<li><code>string&amp; erase(int pos, int n = npos);</code> <strong>删除</strong>从Pos开始的n个字符 </li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">//插入111字符串，输出的是：h111ello</span></span><br><span class="line">	str.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">	<span class="comment">//从1号位置开始3个字符删除，输出hello</span></span><br><span class="line">	str.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);  </span><br><span class="line">	cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="string子串"><a href="#string子串" class="headerlink" title="string子串"></a>string子串</h4><ul>
<li>就是从字符串中截取一部分，就是子串</li>
<li>函数原型：</li>
<li><ul>
<li><code>string substr(int pos = 0, int n = npos) const;</code>  返回由pos开始的n个字符组成的字符串</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用substr截取一部分</span></span><br><span class="line">	string str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">	string subStr = str.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;subStr = &quot;</span> &lt;&lt; subStr &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//在实际应用中，一般先find下标，然后再截取</span></span><br><span class="line">	string email = <span class="string">&quot;hello@sina.com&quot;</span>;</span><br><span class="line">	<span class="type">int</span> pos = email.<span class="built_in">find</span>(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">	string username = email.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;username: &quot;</span> &lt;&lt; username &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><ul>
<li>vector数据结构和数组很相似，与数组不同之处就是，数组是静态空间，而vector是动态扩展</li>
<li>动态扩展：不是在原来空间后面接新空间，而是找到一个更大的空间存放数据，释放原来空间</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/su9XAtxQ4vzFO5L.png" alt="image-20220405210606603"></p>
<h4 id="vector构造函数"><a href="#vector构造函数" class="headerlink" title="vector构造函数"></a>vector构造函数</h4><ul>
<li>创建容器的函数原型：</li>
<li><ul>
<li><code>vector&lt;T&gt; v;</code>  采用模板实现类实现，默认构造函数</li>
<li><code>vector(v.begin(), v.end());</code>  将v[begin(), end())区间中的元素拷贝给本身。以为end是指向最后位置的后面一位，因此这里的区间是左闭右开</li>
<li><code>vector(n, elem);</code> 构造函数将n个elem拷贝给本身。</li>
<li><code>vector(const vector &amp;vec);</code> 拷贝构造函数。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印容器中的数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//无参构造，使用push_back向容器中赋值</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1; </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printVector</span>(v1);</span><br><span class="line">	<span class="comment">//使用区间元素，将区间内元素拷贝</span></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(v1.begin(), v1.end())</span></span>;</span><br><span class="line">	<span class="built_in">printVector</span>(v2);</span><br><span class="line">	<span class="comment">//给v3赋值10个100</span></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">10</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">	<span class="built_in">printVector</span>(v3);</span><br><span class="line">	<span class="comment">//拷贝构造</span></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v4</span><span class="params">(v3)</span></span>;</span><br><span class="line">	<span class="built_in">printVector</span>(v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="vector赋值"><a href="#vector赋值" class="headerlink" title="vector赋值"></a>vector赋值</h4><ul>
<li>函数原型：</li>
<li><ul>
<li><code>vector&amp; operator=(const vector &amp;vec);</code>重载=操作符</li>
<li><code>assign(beg, end);</code>   将[beg, end)区间中的数据拷贝赋值给本身。</li>
<li><code>assign(n, elem);</code>   将n个elem拷贝赋值给本身</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;     <span class="comment">//无参构造</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//下面是赋值操作</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">	v2 = v1;　　　　　　　<span class="comment">//重载＝运算符</span></span><br><span class="line">	<span class="comment">//使用assign赋值容器区间的数据</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;v3;</span><br><span class="line">	v3.<span class="built_in">assign</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//使用assign赋值10个100</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;v4;</span><br><span class="line">	v4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="vector容量和大小"><a href="#vector容量和大小" class="headerlink" title="vector容量和大小"></a>vector容量和大小</h4><ul>
<li>对vector容器的容量和大小操作，函数原型：</li>
<li><ul>
<li><code>empty();</code> 判断容器是否为空</li>
<li><code>capacity();</code> 容器的容量</li>
<li><code>size();</code> 返回容器中元素的个数</li>
<li><code>resize(int num);</code>  重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则超出容器长度的元素被删除。</li>
<li><code>resize(int num, elem);</code>  重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;    <span class="comment">//无参构造</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//empty如果为空，则返回true否则返回false</span></span><br><span class="line">	<span class="keyword">if</span> (v1.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;v1为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;v1不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//capacity是返回容量大小</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;v1的容量 = &quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//size是返回容器内元素的数量</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;v1的大小 = &quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//resize 重新指定大小 ，若指定的更大，默认用0填充新位置，可以利用重载版本替换默认填充</span></span><br><span class="line">	v1.<span class="built_in">resize</span>(<span class="number">15</span>,<span class="number">10</span>);</span><br><span class="line">	<span class="comment">//resize 重新指定大小 ，若指定的更小，超出部分元素被删除</span></span><br><span class="line">	v1.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="vector插入和删除"><a href="#vector插入和删除" class="headerlink" title="vector插入和删除"></a>vector插入和删除</h4><ul>
<li>函数原型：</li>
<li><ul>
<li><code>push_back(ele);</code> 尾部插入元素ele</li>
<li><code>pop_back();</code>  删除最后一个元素</li>
<li><code>insert(const_iterator pos, ele);</code>  迭代器指向pos插入元素ele</li>
<li><code>insert(const_iterator pos, int count,ele);</code>迭代器指向位置pos插入count个元素ele</li>
<li><code>erase(const_iterator pos);</code> 删除迭代器指向的元素</li>
<li><code>erase(const_iterator start, const_iterator end);</code>删除迭代器从start到end之间的元素</li>
<li><code>clear();</code> 删除容器中所有元素</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	<span class="comment">//尾插</span></span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v1.<span class="built_in">push_back</span>(<span class="number">20</span>);　　<span class="comment">//10 20</span></span><br><span class="line">	<span class="comment">//尾删</span></span><br><span class="line">	v1.<span class="built_in">pop_back</span>();      <span class="comment">//10</span></span><br><span class="line">	<span class="comment">//插入</span></span><br><span class="line">	v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">100</span>);  <span class="comment">//100 10</span></span><br><span class="line">	<span class="comment">//插入2个</span></span><br><span class="line">	v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">1000</span>);　<span class="comment">//1000 1000 100 10</span></span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	v1.<span class="built_in">erase</span>(v1.<span class="built_in">begin</span>());            <span class="comment">//1000 100 10</span></span><br><span class="line">	<span class="comment">//清空</span></span><br><span class="line">	v1.<span class="built_in">erase</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());  <span class="comment">//空</span></span><br><span class="line">	v1.<span class="built_in">clear</span>();　　　　　　　　　　　　　<span class="comment">//空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="vector数据存取"><a href="#vector数据存取" class="headerlink" title="vector数据存取"></a>vector数据存取</h4><ul>
<li>函数原型：</li>
<li><ul>
<li><code>at(int idx);</code>     返回索引idx所指的数据</li>
<li><code>operator[];</code>       返回索引idx所指的数据</li>
<li><code>front();</code>            返回容器中第一个数据元素</li>
<li><code>back();</code>              返回容器中最后一个数据元素</li>
<li>注：之前的begin和end都是指针，指向的第一个和最后一个＋１的位置，想要看具体的数据元素需要解引用；而现在的front和back是直接返回的具体的数据元素</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//使用[]存取容器内数据</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		cout &lt;&lt; v1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//使用at存取容器内数据</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v1.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">		cout &lt;&lt; v1.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v1的第一个元素为： &quot;</span> &lt;&lt; v1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v1的最后一个元素为： &quot;</span> &lt;&lt; v1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="vector互换容器"><a href="#vector互换容器" class="headerlink" title="vector互换容器"></a>vector互换容器</h4><ul>
<li>将两个容器中的元素进行互换，一般用于收缩内存：</li>
<li><ul>
<li><code>swap(vec);</code>  将vec与本身的元素互换</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//元素互换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义两个准备交换的容器</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;v1;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//互换容器，两个容器内数据互换</span></span><br><span class="line">	v1.<span class="built_in">swap</span>(v2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//收缩内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义一个存放很多数据的容量，此时，会发现size是100000而capacity更大</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//若此时我们将这个容器resize成3，一个很小的数量</span></span><br><span class="line">	v.<span class="built_in">resize</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="comment">//这时会发现，size是３而capacity很大，这是很浪费资源的</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//因此可以使用swap的方式收缩内存</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v); <span class="comment">//匿名对象</span></span><br><span class="line">    <span class="comment">//收缩后，size就是３,capacity也是3</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v的容量为：&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v的大小为：&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>vector&lt;int&gt;(v).swap(v);</code> 解读</li>
<li><ul>
<li><code>vector&lt;int&gt;(v)</code>是一个匿名对象，也就是说这里创建了一个匿名的容器对象，拷贝的v的容器，这个匿名的容器size=3,capacity=3</li>
<li>匿名对象经过swap交换后，v的容器内容就是匿名对象的内容，此时v的size=3,capacity=3</li>
<li>因为匿名对象的特性，这行代码运行结束后，匿名对象就直接被释放了，因此，最后就剩下了v，而v的内存也就实现了缩小</li>
</ul>
</li>
</ul>
<h4 id="vector预留空间"><a href="#vector预留空间" class="headerlink" title="vector预留空间"></a>vector预留空间</h4><ul>
<li>减少vector在动态扩展容量时的扩展次数</li>
<li><ul>
<li>就是说，因为vector容器的动态扩展属性，在存放大量数据的时候，容器就需要多次的扩展内存，而使用了reserve(len)后，就相当于告诉编译器我们要存放len长度的数据，编译器就只会进行一次动态扩展（就是让编译器提前预留这些空间，不需要多次的扩展了）</li>
</ul>
</li>
<li>函数原型：</li>
<li><ul>
<li><code>reserve(int len);</code>容器预留len个元素长度，预留位置不初始化，元素不可访问。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="comment">//预留空间</span></span><br><span class="line">	v.<span class="built_in">reserve</span>(<span class="number">100000</span>);</span><br><span class="line">	<span class="comment">//下面都是为了看动态扩展了几次</span></span><br><span class="line">    <span class="comment">//因为每次动态扩展后，都会重新寻找一块更大的空间，那么v的首地址就会发生改变</span></span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">		<span class="keyword">if</span> (p != &amp;v[<span class="number">0</span>]) &#123;</span><br><span class="line">			p = &amp;v[<span class="number">0</span>];</span><br><span class="line">			num++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num:&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h3><ul>
<li>这是一个双端数组，可以对头端进行插入删除操作</li>
<li>deque和vector的区别</li>
<li><ul>
<li>vector对于头部的插入删除效率低，数据量越大，效率越低（因为对vector进行头部插入时，需要讲整个数据向后移才能在头部插入）</li>
<li>deque相对而言，对头部的插入删除速度回比vector快</li>
<li><strong>vector访问元素时的速度会比deque快</strong>,这和两者内部实现有关</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/4AVk7PCJ8ZeiRHr.png" alt="image-20220406094829410"></p>
<h4 id="deque构造函数"><a href="#deque构造函数" class="headerlink" title="deque构造函数"></a>deque构造函数</h4><ul>
<li>函数原型（跟vector一样）</li>
<li><ul>
<li><code>deque&lt;T&gt;</code> 默认构造形式</li>
<li><code>deque(beg, end);</code> 构造函数将[beg, end)区间中的元素拷贝给本身。</li>
<li><code>deque(n, elem);</code> 构造函数将n个elem拷贝给本身。</li>
<li><code>deque(const deque &amp;deq);</code> 拷贝构造函数</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在这里函数调用容器时，需要注意：</span></span><br><span class="line"><span class="comment">//printDeque1函数中可以任意额修改传入容器的数据</span></span><br><span class="line"><span class="comment">//而一般我们不想函数可以修改容器中数据，仅仅可以读取数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDeque1</span><span class="params">(deque&lt;<span class="type">int</span>&gt;&amp; d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        *it = <span class="number">100</span>;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因此，就需要const进行限制，像下面printDeque2函数</span></span><br><span class="line"><span class="comment">//但是形参加了const后，deque&lt;int&gt;::iterator将会报错</span></span><br><span class="line"><span class="comment">//就是这个迭代器不符合const，</span></span><br><span class="line"><span class="comment">//需要修改成deque&lt;int&gt;::const_iterator，此时就可以只读了</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDeque2</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque构造</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; d1; <span class="comment">//无参构造函数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printDeque2</span>(d1);</span><br><span class="line">    <span class="comment">//区间的方式构造函数</span></span><br><span class="line">	<span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">d2</span><span class="params">(d1.begin(),d1.end())</span></span>;</span><br><span class="line">	<span class="built_in">printDeque2</span>(d2);</span><br><span class="line">	<span class="comment">//给容器内构造10个100</span></span><br><span class="line">	deque&lt;<span class="type">int</span>&gt;<span class="built_in">d3</span>(<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line">	<span class="built_in">printDeque2</span>(d3);</span><br><span class="line">	<span class="comment">//拷贝构造函数</span></span><br><span class="line">	deque&lt;<span class="type">int</span>&gt;d4 = d3;</span><br><span class="line">	<span class="built_in">printDeque2</span>(d4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="deque赋值"><a href="#deque赋值" class="headerlink" title="deque赋值"></a>deque赋值</h4><ul>
<li>函数原型（跟vector一模一样）</li>
<li><ul>
<li><code>deque&amp; operator=(const deque &amp;deq);</code>  重载等号操作符</li>
<li><code>assign(beg, end);</code>  将[beg, end)区间中的数据拷贝赋值给本身。</li>
<li><code>assign(n, elem);</code>   将n个elem拷贝赋值给本身。</li>
</ul>
</li>
</ul>
<h4 id="deque大小操作"><a href="#deque大小操作" class="headerlink" title="deque大小操作"></a>deque大小操作</h4><ul>
<li>函数原型（跟vector一模一样）</li>
<li><ul>
<li><code>deque.empty();</code> 判断容器是否为空</li>
<li><code>deque.size();</code>  返回容器中元素的个数</li>
<li><code>deque.resize(num);</code>  重新指定容器的长度为num,若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li>
<li><code>deque.resize(num, elem);</code> 重新指定容器的长度为num,若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li>
<li>注：deuqe没有capacity容量的概念</li>
</ul>
</li>
</ul>
<h4 id="deque插入和删除"><a href="#deque插入和删除" class="headerlink" title="deque插入和删除"></a>deque插入和删除</h4><ul>
<li>函数原型（大体上与vector差不多，就是insert多了一个功能）</li>
<li>两端插入操作：<ul>
<li><code>push_back(elem);</code>    在容器尾部添加一个数据</li>
<li><code>push_front(elem);</code>  在容器头部插入一个数据</li>
<li><code>pop_back();</code>               删除容器最后一个数据</li>
<li><code>pop_front();</code>             删除容器第一个数据</li>
</ul>
</li>
</ul>
<ul>
<li>指定位置操作：<ul>
<li><code>insert(pos,elem);</code> 在pos位置插入elem元素，<strong>返回新数据位置</strong>。</li>
<li><code>insert(pos,n,elem);</code>  在pos位置插入n个elem数据，<strong>无返回值</strong>。</li>
<li><code>insert(pos,beg,end);</code>  在pos位置插入[beg,end)区间的数据，<strong>无返回值</strong>。</li>
<li><code>clear();</code>  清空容器的所有数据</li>
<li><code>erase(beg,end);</code>   删除[beg,end)区间数据，返回下一个数据位置。</li>
<li><code>erase(pos);</code>  删除pos位置的数据，返回下一个数据的位置。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两端操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">	<span class="comment">//尾插</span></span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">10</span>);   <span class="comment">//10</span></span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">20</span>);   <span class="comment">//10 20</span></span><br><span class="line">	<span class="comment">//头插</span></span><br><span class="line">	d.<span class="built_in">push_front</span>(<span class="number">100</span>); <span class="comment">//100 10 20</span></span><br><span class="line">	d.<span class="built_in">push_front</span>(<span class="number">200</span>); <span class="comment">//200 100 10 20</span></span><br><span class="line">	<span class="comment">//尾删</span></span><br><span class="line">	d.<span class="built_in">pop_back</span>();      <span class="comment">//200 100 10</span></span><br><span class="line">	<span class="comment">//头删</span></span><br><span class="line">	d.<span class="built_in">pop_front</span>();     <span class="comment">//100 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	d.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">	d.<span class="built_in">push_front</span>(<span class="number">200</span>);  <span class="comment">//200 100 10 20 </span></span><br><span class="line"></span><br><span class="line">	d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>(), <span class="number">1000</span>);  <span class="comment">//1000 200 100 10 20</span></span><br><span class="line">	<span class="comment">//10000 10000 1000 200 100 10 20</span></span><br><span class="line">    d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>(), <span class="number">2</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">	deque&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">	d2.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	d2.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	d2.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="comment">//1 2 3 10000 10000 1000 200 100 10 20</span></span><br><span class="line">	d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>(), d2.<span class="built_in">begin</span>(), d2.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">	deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	d.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">	d.<span class="built_in">push_front</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">	d.<span class="built_in">erase</span>(d.<span class="built_in">begin</span>());   <span class="comment">//100 10 20</span></span><br><span class="line"></span><br><span class="line">	d.<span class="built_in">erase</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>()); <span class="comment">//空</span></span><br><span class="line">	d.<span class="built_in">clear</span>();　　　　　　　　　　　 <span class="comment">//空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="deque数据存取"><a href="#deque数据存取" class="headerlink" title="deque数据存取"></a>deque数据存取</h4><ul>
<li>函数原型（跟vector一模一样）</li>
<li><ul>
<li><code>at(int idx);</code>   返回索引idx所指的数据</li>
<li><code>operator[];</code>     返回索引idx所指的数据（就平常读取数组的方式）</li>
<li><code>front();</code>           返回容器中第一个数据元素</li>
<li><code>back();</code>             返回容器中最后一个数据元素</li>
</ul>
</li>
</ul>
<h4 id="deque排序"><a href="#deque排序" class="headerlink" title="deque排序"></a>deque排序</h4><ul>
<li>利用算法对容器进行排序，对vector一样有效</li>
<li>算法：</li>
<li><ul>
<li><code>sort(iterator beg, iterator end)</code> 对beg和end区间内元素进行排序，从小到大</li>
<li>注：后面的算法部分，会讲解更多的排序方法</li>
</ul>
</li>
</ul>
<h3 id="stack容器（栈容器）"><a href="#stack容器（栈容器）" class="headerlink" title="stack容器（栈容器）"></a>stack容器（栈容器）</h3><h4 id="stack基本概念"><a href="#stack基本概念" class="headerlink" title="stack基本概念"></a>stack基本概念</h4><ul>
<li>starck是一种<strong>先进后出</strong>的数据结构（下面的图其实倒过来看容易理解）</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/KVNunXvlbELq7jk.png" alt="image-20220406113720136"></p>
<ul>
<li>注：因为栈顶的元素才能被外界使用，因此栈不存在遍历的行为</li>
</ul>
<h4 id="stack常用接口"><a href="#stack常用接口" class="headerlink" title="stack常用接口"></a>stack常用接口</h4><ul>
<li>栈容器的常用接口：</li>
<li><ul>
<li><code>stack&lt;T&gt; stk;</code>   stack采用模板类实现， stack对象的默认构造形式</li>
<li><code>stack(const stack &amp;stk);</code>  拷贝构造函数</li>
</ul>
</li>
<li>赋值操作：<ul>
<li><code>stack&amp; operator=(const stack &amp;stk);</code> 重载等号操作符</li>
</ul>
</li>
<li>数据存取：<ul>
<li><code>push(elem);</code>    向栈顶添加元素</li>
<li><code>pop();</code>               从栈顶移除第一个元素</li>
<li><code>top();</code>               返回栈顶元素</li>
</ul>
</li>
<li>大小操作：<ul>
<li><code>empty();</code>           判断堆栈是否为空</li>
<li><code>size();</code>             返回栈的大小</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈容器常用接口</span></span><br><span class="line"><span class="comment">//想象上面的图片，入栈和出栈的操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//创建栈容器 栈容器必须符合先进后出</span></span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	<span class="comment">//向栈中添加元素，叫做 压栈 入栈</span></span><br><span class="line">	s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">	<span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="comment">//输出栈顶元素</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;栈顶元素为： &quot;</span> &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//弹出栈顶元素</span></span><br><span class="line">		s.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="queue容器（队列容器）"><a href="#queue容器（队列容器）" class="headerlink" title="queue容器（队列容器）"></a>queue容器（队列容器）</h3><h4 id="queue基本概念"><a href="#queue基本概念" class="headerlink" title="queue基本概念"></a>queue基本概念</h4><ul>
<li>queue是一种<strong>先进先出</strong>的数据结构，有两个口</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/mk57Kc6erhASbp8.png" alt="image-20220406123554307"></p>
<ul>
<li>从一端新增元素，从另一端移除元素</li>
<li>注：由于只有队头和队尾可以被访问，因此不存在遍历行为</li>
</ul>
<h5 id="queue常用接口"><a href="#queue常用接口" class="headerlink" title="queue常用接口"></a>queue常用接口</h5><ul>
<li>常用接口：（跟stack差不多）</li>
<li><ul>
<li><code>queue&lt;T&gt; que;</code> queue采用模板类实现，queue对象的默认构造形式</li>
<li><code>queue(const queue &amp;que);</code>  拷贝构造函数</li>
</ul>
</li>
<li>赋值操作：<ul>
<li><code>queue&amp; operator=(const queue &amp;que);</code> 重载等号操作符</li>
</ul>
</li>
<li>数据存取：<ul>
<li><code>push(elem);</code>    往队尾添加元素</li>
<li><code>pop();</code>               从队头移除第一个元素</li>
<li><code>back();</code>             返回最后一个元素</li>
<li><code>front();</code>           返回第一个元素</li>
</ul>
</li>
<li>大小操作：<ul>
<li><code>empty();</code>           判断堆栈是否为空</li>
<li><code>size();</code>             返回栈的大小</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//队列中存放类</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建队列</span></span><br><span class="line">	queue&lt;Person&gt; q;</span><br><span class="line">	<span class="comment">//准备数据</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;唐僧&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">1000</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">900</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;沙僧&quot;</span>, <span class="number">800</span>)</span></span>;</span><br><span class="line">	<span class="comment">//向队列中添加元素  入队操作</span></span><br><span class="line">	q.<span class="built_in">push</span>(p1);</span><br><span class="line">	q.<span class="built_in">push</span>(p2);</span><br><span class="line">	q.<span class="built_in">push</span>(p3);</span><br><span class="line">	q.<span class="built_in">push</span>(p4);</span><br><span class="line">	<span class="comment">//队列不提供迭代器，更不支持随机访问	</span></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="comment">//输出队头元素</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队头元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="built_in">front</span>().m_Name </span><br><span class="line">              &lt;&lt; <span class="string">&quot; 年龄： &quot;</span>&lt;&lt; q.<span class="built_in">front</span>().m_Age &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;队尾元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="built_in">back</span>().m_Name  </span><br><span class="line">              &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; q.<span class="built_in">back</span>().m_Age &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//弹出队头元素</span></span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;队列大小为：&quot;</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="list容器（链表）"><a href="#list容器（链表）" class="headerlink" title="list容器（链表）"></a>list容器（链表）</h3><h4 id="list基本概念"><a href="#list基本概念" class="headerlink" title="list基本概念"></a>list基本概念</h4><ul>
<li>链表：是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</li>
<li>链表有一系列<strong>结点</strong>组成，结点是由存储数据元素的<strong>数据域</strong>和存储下一个结点地址的<strong>指针域</strong>组成</li>
</ul>
<p><img src="https://s2.loli.net/2022/04/08/FDZhpN71aIkWOfA.png" alt="image-20220406150641884"></p>
<p>注：其中prev指向前一个数据的地址，next指向下一个数据的地址</p>
<ul>
<li>list的优点：<ul>
<li>采用动态存储分配，不会造成内存浪费和溢出</li>
<li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素（如果是普通的数组存储，那么在插入或者删除的时候，需要移动后面的数据，而使用链表，就可以直接插入或者删除，然后修改指针域的指向地址就可以了，大大加速了插入和删除的速度）</li>
</ul>
</li>
<li>list的缺点：<ul>
<li>链表灵活，但是空间(指针域) 和 时间（遍历）额外耗费较大（因为存储的不只有数据元素本身，还有指针，因此空间消耗大；由于每次读取都要使用指针找到下个数据元素，而不会像数组直接拿到，因此在遍历链表的时候会消耗大）</li>
</ul>
</li>
</ul>
<p>注：List有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这在vector是不成立的。（list在进行插入和删除的时候直接操作就可以，然后修改指针域的指向，就完成了操作，此时迭代器不会出现变化；而vector在进行插入时，可能会由于当前存储数据的空间不够，而发生动态扩展，此时迭代器指向的位置就发生了变化）</p>
<h4 id="list构造函数"><a href="#list构造函数" class="headerlink" title="list构造函数"></a>list构造函数</h4><ul>
<li>函数原型：（跟vector一样）</li>
<li><ul>
<li><code>list&lt;T&gt; lst;</code>   list采用模板类实现,对象的默认构造形式：</li>
<li><code>list(beg,end);</code> 构造函数将[beg, end)区间中的元素拷贝给本身。</li>
<li><code>list(n,elem);</code>   构造函数将n个elem拷贝给本身。</li>
<li><code>list(const list &amp;lst);</code> 拷贝构造函数。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	list&lt;<span class="type">int</span>&gt;L1;　　　<span class="comment">//无参构造</span></span><br><span class="line">	L1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	L1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	L1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	<span class="comment">//区间的方式构造</span></span><br><span class="line">	list&lt;<span class="type">int</span>&gt;<span class="built_in">L2</span>(L1.<span class="built_in">begin</span>(),L1.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//拷贝构造</span></span><br><span class="line">	list&lt;<span class="type">int</span>&gt;<span class="built_in">L3</span>(L2);</span><br><span class="line">    <span class="comment">//构造10个1000</span></span><br><span class="line">	list&lt;<span class="type">int</span>&gt;<span class="built_in">L4</span>(<span class="number">10</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="list赋值和交换"><a href="#list赋值和交换" class="headerlink" title="list赋值和交换"></a>list赋值和交换</h4><ul>
<li>函数原型：（与vector一样）</li>
<li><ul>
<li><code>assign(beg, end);</code>  将[beg, end)区间中的数据拷贝赋值给本身。</li>
<li><code>assign(n, elem);</code>    将n个elem拷贝赋值给本身。</li>
<li><code>list&amp; operator=(const list &amp;lst);</code>   重载等号操作符</li>
<li><code>swap(lst);</code>   将lst与本身的元素互换。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值和交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	list&lt;<span class="type">int</span>&gt;L1;</span><br><span class="line">	L1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	L1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//赋值</span></span><br><span class="line">	list&lt;<span class="type">int</span>&gt;L2;</span><br><span class="line">	L2 = L1;</span><br><span class="line">	<span class="comment">//区间赋值</span></span><br><span class="line">	list&lt;<span class="type">int</span>&gt;L3;</span><br><span class="line">	L3.<span class="built_in">assign</span>(L2.<span class="built_in">begin</span>(), L2.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//赋值10个100</span></span><br><span class="line">	list&lt;<span class="type">int</span>&gt;L4;</span><br><span class="line">	L4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	list&lt;<span class="type">int</span>&gt;L1;</span><br><span class="line">	L1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	list&lt;<span class="type">int</span>&gt;L2;</span><br><span class="line">	L2.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">//交换两个容器的内容</span></span><br><span class="line">	L1.<span class="built_in">swap</span>(L2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="list大小操作"><a href="#list大小操作" class="headerlink" title="list大小操作"></a>list大小操作</h4><ul>
<li>函数原型：（跟vector一样）</li>
<li><ul>
<li><code>size();</code> 返回容器中元素的个数</li>
<li><code>empty();</code>   判断容器是否为空</li>
<li><code>resize(num);</code>  重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li>
<li><code>resize(num, elem);</code>   重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li>
</ul>
</li>
</ul>
<h4 id="list插入和删除"><a href="#list插入和删除" class="headerlink" title="list插入和删除"></a>list插入和删除</h4><ul>
<li>函数原型：（跟vector差不多，多一个remove）</li>
<li><ul>
<li><code>push_back(elem);</code>在容器尾部加入一个元素</li>
<li><code>pop_back();</code> 删除容器中最后一个元素</li>
<li><code>push_front(elem);</code> 在容器开头插入一个元素</li>
<li><code>pop_front();</code> 从容器开头移除第一个元素</li>
<li><code>insert(pos,elem);</code> 在pos位置插elem元素，返回新数据的位置。</li>
<li><code>insert(pos,n,elem);</code> 在pos位置插入n个elem数据，无返回值。</li>
<li><code>insert(pos,beg,end);</code> 在pos位置插入[beg,end)区间的数据，无返回值。</li>
<li><code>clear();</code> 移除容器的所有数据</li>
<li><code>erase(beg,end);</code> 删除[beg,end)区间数据，返回下一个数据位置。</li>
<li><code>erase(pos);</code> 删除pos位置的数据，返回下一个数据的位置。</li>
<li><code>remove(elem);</code> 删除容器中所有与elem值匹配的元素。（elem是具体的什么数据，就是说删除了指定的什么数据，而不知删除的某个位置的数据，并且，当容器中多次出现这个数据，都会被删除）</li>
</ul>
</li>
</ul>
<h4 id="list数据存取"><a href="#list数据存取" class="headerlink" title="list数据存取"></a>list数据存取</h4><ul>
<li>函数原型：</li>
<li><ul>
<li><code>front();</code>       返回第一个元素。</li>
<li><code>back();</code>         返回最后一个元素。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据存取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	list&lt;<span class="type">int</span>&gt;L1;</span><br><span class="line">	L1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	L1.<span class="built_in">push_back</span>(<span class="number">20</span>);	</span><br><span class="line">	<span class="comment">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第一个元素为： &quot;</span> &lt;&lt; L1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;最后一个元素为： &quot;</span> &lt;&lt; L1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="list反转和排序"><a href="#list反转和排序" class="headerlink" title="list反转和排序"></a>list反转和排序</h4><ul>
<li>将容器中的数据元素反转（以前1 2 3反转后3 2 1）</li>
<li>函数原型：</li>
<li><ul>
<li><code>reverse();</code>   反转链表，前面的预留空间是reserve</li>
<li><code>sort();</code>         链表排序</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反转和排序</span></span><br><span class="line"><span class="comment">//下面这个是指定排序规则</span></span><br><span class="line"><span class="comment">//如果自定义的数据需要排序，可以将形参换成类，然后自定义排序规则</span></span><br><span class="line"><span class="comment">//需要返回bool的值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myCompare</span><span class="params">(<span class="type">int</span> val1 , <span class="type">int</span> val2)</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果要降序，那么就要前一个数　&gt; 后一个数</span></span><br><span class="line">	<span class="keyword">return</span> val1 &gt; val2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	list&lt;<span class="type">int</span>&gt; L;</span><br><span class="line">	L.<span class="built_in">push_back</span>(<span class="number">90</span>);</span><br><span class="line">	L.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	L.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//反转容器的元素</span></span><br><span class="line">	L.<span class="built_in">reverse</span>();</span><br><span class="line">	<span class="comment">//排序</span></span><br><span class="line">    <span class="comment">//这里不能使用sort(L.begin(),L.end())</span></span><br><span class="line">    <span class="comment">//因为L不能随机访问，不能时候全局的排序函数，而应该使用自身的</span></span><br><span class="line">	L.<span class="built_in">sort</span>(); <span class="comment">//默认的排序规则 从小到大</span></span><br><span class="line">	<span class="comment">//需要使用myCompare自定义函数，自定义升序还是降序</span></span><br><span class="line">	L.<span class="built_in">sort</span>(myCompare); <span class="comment">//指定规则，从大到小，降序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="set-multiset容器"><a href="#set-multiset容器" class="headerlink" title="set/multiset容器"></a>set/multiset容器</h3><ul>
<li>所有元素都会在插入时自动被排序</li>
<li>set和multiset区别：<ul>
<li>set不允许容器中有重复的元素，因此向set容器中插入重复数据会失效</li>
<li>multiset允许容器中有重复的元素</li>
</ul>
</li>
</ul>
<h4 id="set构造和赋值"><a href="#set构造和赋值" class="headerlink" title="set构造和赋值"></a>set构造和赋值</h4><ul>
<li>函数原型：</li>
<li><ul>
<li><code>set&lt;T&gt; st;</code>   默认构造函数：</li>
<li><code>set(const set &amp;st);</code>   拷贝构造函数</li>
</ul>
</li>
<li>赋值：<ul>
<li><code>set&amp; operator=(const set &amp;st);</code>    //重载等号操作符</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造和赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">    <span class="comment">//set容器中添加数据只能insert，不能使用之前的push_back</span></span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">40</span>);   <span class="comment">//自动排序10 20 30 40 </span></span><br><span class="line">    <span class="comment">//这时候就算插入一个10的数据，也不会出现在容器中</span></span><br><span class="line">	<span class="comment">//拷贝构造</span></span><br><span class="line">	set&lt;<span class="type">int</span>&gt;<span class="built_in">s2</span>(s1);</span><br><span class="line">	<span class="comment">//赋值</span></span><br><span class="line">	set&lt;<span class="type">int</span>&gt;s3;</span><br><span class="line">	s3 = s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="set大小和交换"><a href="#set大小和交换" class="headerlink" title="set大小和交换"></a>set大小和交换</h4><ul>
<li>函数原型：（跟前面一样的使用方式）</li>
<li><ul>
<li><code>size();</code>          返回容器中元素的数目</li>
<li><code>empty();</code>        判断容器是否为空</li>
<li><code>swap(st);</code>      交换两个集合容器</li>
</ul>
</li>
</ul>
<h4 id="set插入和删除"><a href="#set插入和删除" class="headerlink" title="set插入和删除"></a>set插入和删除</h4><ul>
<li>函数原型：<ul>
<li><code>insert(elem);</code>    在容器中插入元素。</li>
<li><code>clear();</code>               清除所有元素</li>
<li><code>erase(pos);</code> 删除pos迭代器所指元素，返回下一个元素的迭代器。</li>
<li><code>erase(beg, end);</code>  删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。（可以使用begin和end）</li>
<li><code>erase(elem);</code>         删除容器中值为elem的元素。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">	<span class="comment">//插入</span></span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">40</span>);           <span class="comment">//10 20 30 40</span></span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	s1.<span class="built_in">erase</span>(s1.<span class="built_in">begin</span>());    <span class="comment">//20 30 40</span></span><br><span class="line">	s1.<span class="built_in">erase</span>(<span class="number">30</span>);            <span class="comment">//20 40</span></span><br><span class="line">	<span class="comment">//清空</span></span><br><span class="line">	<span class="comment">//s1.erase(s1.begin(), s1.end());</span></span><br><span class="line">	s1.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="set查找和统计"><a href="#set查找和统计" class="headerlink" title="set查找和统计"></a>set查找和统计</h4><ul>
<li>函数原型：<ul>
<li><code>find(key);</code>  查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li>
<li><code>count(key);</code> 统计key的元素个数（对于set容器，这个值只能是0或者1，因为set容器不存放重复的数据）</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找和统计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">	<span class="comment">//插入</span></span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">    s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">	<span class="comment">//查找，返回的是迭代器</span></span><br><span class="line">	set&lt;<span class="type">int</span>&gt;::iterator pos = s1.<span class="built_in">find</span>(<span class="number">30</span>);</span><br><span class="line">	<span class="keyword">if</span> (pos != s1.<span class="built_in">end</span>())&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找到了元素 ： &quot;</span> &lt;&lt; *pos &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;未找到元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//统计，set容器，要么0要么1</span></span><br><span class="line">	<span class="type">int</span> num = s1.<span class="built_in">count</span>(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="set和multiset的区别"><a href="#set和multiset的区别" class="headerlink" title="set和multiset的区别"></a>set和multiset的区别</h4><ul>
<li>区别：<ul>
<li>set不可以插入重复数据，而multiset可以</li>
<li>set插入数据的同时会返回插入结果，表示插入是否成功，这个返回的结果是个对组pair，里面包含两个数据，可以使用first和second访问，注意，这里的first和second没有括号()</li>
<li>multiset不会检测数据，因此可以插入重复数据</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//set和multiset区别</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="comment">//下面就是insert返回的对组pair，由迭代器和bool数据组成，</span></span><br><span class="line">    <span class="comment">//其中的bool代表这容器是否插入成功</span></span><br><span class="line">	pair&lt;set&lt;<span class="type">int</span>&gt;::iterator, <span class="type">bool</span>&gt;  ret = s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret.second) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;第一次插入成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;第一次插入失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//由于set不可插入重复的数据，因此下面再次插入就会失败</span></span><br><span class="line">	ret = s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret.second) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;第二次插入成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;第二次插入失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//multiset</span></span><br><span class="line">	multiset&lt;<span class="type">int</span>&gt; ms;</span><br><span class="line">    <span class="comment">//multiset可以重复的插入重复的数据</span></span><br><span class="line">	ms.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	ms.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">for</span> (multiset&lt;<span class="type">int</span>&gt;::iterator it = ms.<span class="built_in">begin</span>(); it != ms.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="pair对组创建"><a href="#pair对组创建" class="headerlink" title="pair对组创建"></a>pair对组创建</h4><ul>
<li>成对出现的数据，利用对组可以返回两个数据（一般用来存放两个有相关关系的数据）</li>
<li>两种创建方式：<ul>
<li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li>
<li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对组创建</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="function">pair&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(string(<span class="string">&quot;Tom&quot;</span>), <span class="number">20</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt;  p.first &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; p.second &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//make_pair常用</span></span><br><span class="line">	pair&lt;string, <span class="type">int</span>&gt; p2 = <span class="built_in">make_pair</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">10</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p2.first &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; p2.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="set容器排序"><a href="#set容器排序" class="headerlink" title="set容器排序"></a>set容器排序</h4><ul>
<li>利用仿函数，改变排序规则</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//set存放内置数据类型int数据，进行自定义排序</span></span><br><span class="line"><span class="comment">//下面是仿函数，实际上是个类，指定前一个数要大于后一个数，升序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 &gt; v2;    <span class="comment">//降序</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">	s1.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">	<span class="comment">//默认从小到大</span></span><br><span class="line">	<span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = s1.<span class="built_in">begin</span>(); it != s1.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//指定排序规则</span></span><br><span class="line">    <span class="comment">//set&lt;int&gt;这是平常使用的set容器，因为没有写后面的参数</span></span><br><span class="line">    <span class="comment">//所以是默认使用降序，现在我们指定使用MyCompare仿函数指定拍苏方式</span></span><br><span class="line">	set&lt;<span class="type">int</span>,MyCompare&gt; s2;</span><br><span class="line">	s2.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s2.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">	s2.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">	s2.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">	s2.<span class="built_in">insert</span>(<span class="number">50</span>);</span><br><span class="line">	<span class="keyword">for</span> (set&lt;<span class="type">int</span>, MyCompare&gt;::iterator it = s2.<span class="built_in">begin</span>(); it != s2.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//set存放自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//下面是自定义排序规则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">comparePerson</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person&amp; p1, <span class="type">const</span> Person &amp;p2)</span></span>&#123;</span><br><span class="line">		<span class="comment">//按照年龄进行排序  降序</span></span><br><span class="line">		<span class="keyword">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//存放自定义的数据类型，编译器并不知道该怎么排序</span></span><br><span class="line">    <span class="comment">//因此，一般自定义的数据类型都需要自定义排序规则</span></span><br><span class="line">	set&lt;Person, comparePerson&gt; s;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">23</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">27</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;张飞&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line">	s.<span class="built_in">insert</span>(p1);</span><br><span class="line">	s.<span class="built_in">insert</span>(p2);</span><br><span class="line">	s.<span class="built_in">insert</span>(p3);</span><br><span class="line">	s.<span class="built_in">insert</span>(p4);</span><br><span class="line">    <span class="comment">//注意下面的迭代器也需要写出comparePerson仿函数</span></span><br><span class="line">	<span class="keyword">for</span> (set&lt;Person, comparePerson&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="map-multimap容器"><a href="#map-multimap容器" class="headerlink" title="map/multimap容器"></a>map/multimap容器</h3><ul>
<li>map中所有元素都是pair，也就是对组</li>
<li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值），这既是键值对</li>
<li>所有元素都会根据元素的键值<strong>自动排序</strong>。注意：是根据键值排序而不是实值排序</li>
<li>map的优点：可以根据key值快速找到value值</li>
<li>map和multimap<strong>区别</strong>：<ul>
<li>map不允许容器中有重复key值元素，注意是key不是value</li>
<li>multimap允许容器中有重复key值元素，注意是key不是value</li>
</ul>
</li>
</ul>
<h4 id="map构造和赋值"><a href="#map构造和赋值" class="headerlink" title="map构造和赋值"></a>map构造和赋值</h4><ul>
<li>函数原型：</li>
<li>构造：</li>
<li><ul>
<li><code>map&lt;T1, T2&gt; mp;</code>               map默认构造函数: </li>
<li><code>map(const map &amp;mp);</code>       拷贝构造函数</li>
</ul>
</li>
<li>赋值：</li>
<li><ul>
<li><code>map&amp; operator=(const map &amp;mp);</code>   重载等号操作符</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//map构造和赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMap</span><span class="params">(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&amp;m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">        <span class="comment">//下面访问map的数据时，如果使用(*it)那么就得到的是键值对</span></span><br><span class="line">        <span class="comment">//因此，可以使用(*it).first访问数据</span></span><br><span class="line">        <span class="comment">//也可以把迭代器it当成指针，指向数据，进行访问</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m; <span class="comment">//默认构造</span></span><br><span class="line">    <span class="comment">//向map中插入键值对，需要使用pair对组</span></span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">	<span class="built_in">printMap</span>(m);</span><br><span class="line">    </span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;<span class="built_in">m2</span>(m); <span class="comment">//拷贝构造</span></span><br><span class="line">	<span class="built_in">printMap</span>(m2);</span><br><span class="line">    </span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m3;</span><br><span class="line">	m3 = m2; <span class="comment">//赋值</span></span><br><span class="line">	<span class="built_in">printMap</span>(m3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map大小和交换"><a href="#map大小和交换" class="headerlink" title="map大小和交换"></a>map大小和交换</h4><ul>
<li>函数原型：（跟之前一样，没什么区别）</li>
<li><ul>
<li><code>size();</code>          返回容器中元素的数目</li>
<li><code>empty();</code>        判断容器是否为空</li>
<li><code>swap(st);</code>      交换两个集合容器</li>
</ul>
</li>
</ul>
<h4 id="map插入和删除"><a href="#map插入和删除" class="headerlink" title="map插入和删除"></a>map插入和删除</h4><ul>
<li>函数原型：</li>
<li><ul>
<li><code>insert(elem);</code>  在容器中插入元素。</li>
<li><code>clear();</code>       清除所有元素</li>
<li><code>erase(pos);</code> 删除pos迭代器所指元素，返回下一个元素的迭代器。</li>
<li><code>erase(beg, end);</code> 删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li>
<li><code>erase(key);</code>   删除容器中值为key的元素。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//插入</span></span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">	<span class="comment">//第一种插入方式</span></span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">	<span class="comment">//第二种插入方式，常用</span></span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">	<span class="comment">//第三种插入方式</span></span><br><span class="line">	m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">	<span class="comment">//第四种插入方式</span></span><br><span class="line">    <span class="comment">//这种方式不适合赋值，但是可以读取数据</span></span><br><span class="line">    <span class="comment">//因为此时如果写m[5]依然可以运行，尽管没有第5个key值</span></span><br><span class="line">    <span class="comment">//但是运行m[5]会创建一个key=5,value=0的键值对</span></span><br><span class="line">    <span class="comment">//因此不应该用这种方式进行数据插入</span></span><br><span class="line">	m[<span class="number">4</span>] = <span class="number">40</span>; </span><br><span class="line">	<span class="comment">//删除第一个</span></span><br><span class="line">	m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="comment">//删除key为3的键值对</span></span><br><span class="line">	m.<span class="built_in">erase</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="comment">//清空</span></span><br><span class="line">	m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>(),m.<span class="built_in">end</span>());</span><br><span class="line">	m.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map查找和统计"><a href="#map查找和统计" class="headerlink" title="map查找和统计"></a>map查找和统计</h4><ul>
<li>函数原型：（跟set一模一样）</li>
<li><ul>
<li><code>find(key);</code>    查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li>
<li><code>count(key);</code>  统计key的元素个数，对于map容器这个数值要么是0要么是1，跟set一样</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找和统计</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;m; </span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">	<span class="comment">//查找</span></span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator pos = m.<span class="built_in">find</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">if</span> (pos != m.<span class="built_in">end</span>())&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找到了元素 key = &quot;</span> &lt;&lt; (*pos).first &lt;&lt; <span class="string">&quot; value = &quot;</span> &lt;&lt; (*pos).second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;未找到元素&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//统计,找key=3的数据的数量</span></span><br><span class="line">	<span class="type">int</span> num = m.<span class="built_in">count</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="map容器排序"><a href="#map容器排序" class="headerlink" title="map容器排序"></a>map容器排序</h4><ul>
<li>map容器默认排序规则为按照key值进行从小到大排序</li>
<li>使用仿函数，自定义排序规则（跟set一样）</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义仿函数，排序规则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//默认从小到大排序</span></span><br><span class="line">	<span class="comment">//利用仿函数实现从大到小排序</span></span><br><span class="line">    <span class="comment">//注意仿函数写的位置</span></span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>, MyCompare&gt; m;</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">4</span>, <span class="number">40</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">5</span>, <span class="number">50</span>));</span><br><span class="line">    <span class="comment">//下面的迭代器也需要带有仿函数</span></span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>, MyCompare&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>C++笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记（六）STL-常用算法</title>
    <url>/2022/04/25/C++%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89STL-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>此C++系列的笔记，是根据黑马程序员的C++视频教程所写。这里包括了一些常用的算法，可以直接在目录中看到</p>
<span id="more"></span>

<h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><ul>
<li>就是重载了()运算符，因为调用函数的时候也是使用的()，因此，也称为函数对象或者仿函数，但是实际上是个类（而类名，其实就是仿函数的函数名了）</li>
</ul>
<h4 id="函数对象使用"><a href="#函数对象使用" class="headerlink" title="函数对象使用"></a>函数对象使用</h4><ul>
<li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值（在前面类与对象2中说明的一样）</li>
<li>函数对象超出普通函数的概念，函数对象可以有自己的状态（就是可以在类内定义一个成员变量，记录这个重载运算符的调用状态，如：次数）</li>
<li>函数对象可以作为参数传递</li>
</ul>
<p>注：其实就是说，这个类重载的()运算符可以当做函数来使用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</span></span><br><span class="line"><span class="comment">//其实这里的类名就是这个仿函数的函数名了</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAdd</span>&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 + v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	MyAdd myAdd;</span><br><span class="line">    <span class="comment">//与调用普通函数一样，有参数，有返回值</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">myAdd</span>(<span class="number">10</span>, <span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、函数对象可以有自己的状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyPrint</span>()&#123;</span><br><span class="line">		count = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string test)</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; test &lt;&lt; endl;</span><br><span class="line">		count++; <span class="comment">//统计使用次数</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> count; <span class="comment">//内部自己的状态</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	MyPrint myPrint;</span><br><span class="line">	<span class="built_in">myPrint</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	<span class="built_in">myPrint</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;myPrint调用次数为： &quot;</span> &lt;&lt; myPrint.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3、函数对象可以作为参数传递</span></span><br><span class="line"><span class="comment">//就是下面这个函数的形参，可以将这个类传入，就是函数对象传入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doPrint</span><span class="params">(MyPrint &amp;mp , string test)</span></span>&#123;</span><br><span class="line">	<span class="built_in">mp</span>(test);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">	MyPrint myPrint;</span><br><span class="line">	<span class="built_in">doPrint</span>(myPrint, <span class="string">&quot;Hello C++&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><ul>
<li>返回bool类型的仿函数称为<strong>谓词</strong>（这是前提）</li>
<li>如果operator()接受一个参数，那么叫做一元谓词</li>
<li>如果operator()接受两个参数，那么叫做二元谓词</li>
</ul>
<p>注：谓词主要是为后面的算法服务的，比如之前的自定义降序排序，就是通过bool类型的仿函数作为算法函数的参数，使得算法得到自定义的结果。（对于算法函数对输入参数中的仿函数的要求主要是看算法函数的内部是如何定义的，所以，我们只需要记住常用算法是这么写就行了）</p>
<h4 id="一元谓词"><a href="#一元谓词" class="headerlink" title="一元谓词"></a>一元谓词</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.一元谓词</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">GreaterFive</span>&#123;</span><br><span class="line">    <span class="comment">//首先是bool类型的返回值，然后只有一个参数，就是一元谓词</span></span><br><span class="line">    <span class="comment">//下面就是输入的值大于5，就会返回true</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//find_if就是按照自定义的方式寻找容器中的数据，如果找到了就返回这个数据的迭代器（就是指针）</span></span><br><span class="line">    <span class="comment">//对这个算法函数先是输入了范围（begin和end），然后是一元谓词，就是自定义的寻找规则，可以直接使用类名表示这个仿函数</span></span><br><span class="line">    <span class="comment">//也可以按照上一节中，先定义一个类，再把类放到这里</span></span><br><span class="line">    <span class="comment">//这里的GreaterFive()的()中并没有输入参数，因为这是一个匿名对象的创建</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">GreaterFive</span>());</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;没找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二元谓词"><a href="#二元谓词" class="headerlink" title="二元谓词"></a>二元谓词</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二元谓词  跟之前的排序算法一样的使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num1 &gt; num2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//默认从小到大</span></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//使用函数对象改变算法策略，排序从大到小</span></span><br><span class="line">    <span class="comment">//这里的仿函数的()依然没有参数传入，因为这是匿名对象的创建</span></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">MyCompare</span>());</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内建函数对象"><a href="#内建函数对象" class="headerlink" title="内建函数对象"></a>内建函数对象</h3><ul>
<li>就是上面所说的仿函数（函数对象），只不过这些是stl内部写好的仿函数，因此需要包含头文件<code>#include &lt;functional&gt;</code></li>
<li>主要分为三类：</li>
<li><ul>
<li>算术仿函数</li>
<li>关系仿函数</li>
<li>逻辑仿函数</li>
</ul>
</li>
<li>注：这些仿函数与我们正常使用的差不多，因此，可以自己写，也可以使用内建仿函数（爱用不用）</li>
</ul>
<h4 id="算术仿函数"><a href="#算术仿函数" class="headerlink" title="算术仿函数"></a>算术仿函数</h4><ul>
<li>就是四则运算，加上取反仿函数（这里的取反，是指取负数）</li>
<li>其中negate（取反）是一元运算，其他都是二元运算</li>
<li>函数原型：</li>
<li><ul>
<li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>               加法仿函数</li>
<li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>              减法仿函数</li>
<li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>    乘法仿函数</li>
<li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>         除法仿函数</li>
<li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>         取模仿函数</li>
<li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>           取反仿函数</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其实下面的仿函数的应用我们大可以使用正常的+-*/的符号运算</span></span><br><span class="line"><span class="comment">//因此说，爱用不用</span></span><br><span class="line"><span class="comment">//negate取反</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	negate&lt;<span class="type">int</span>&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">n</span>(<span class="number">50</span>) &lt;&lt; endl;   <span class="comment">//-50</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//plus 加法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	plus&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">p</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;  <span class="comment">//30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关系仿函数"><a href="#关系仿函数" class="headerlink" title="关系仿函数"></a>关系仿函数</h4><ul>
<li>函数原型：</li>
<li><ul>
<li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                   等于</li>
<li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>           不等于</li>
<li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                      大于</li>
<li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>          大于等于</li>
<li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                             小于</li>
<li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>                 小于等于</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是自定义实现的仿函数，用于降序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//无论是自己写的，还是使用内建的，都是一样的效果</span></span><br><span class="line">	<span class="comment">//自己实现仿函数</span></span><br><span class="line">	<span class="comment">//sort(v.begin(), v.end(), MyCompare());</span></span><br><span class="line">	<span class="comment">//STL内建仿函数  大于仿函数  降序  这里需要指定是int的</span></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="逻辑仿函数"><a href="#逻辑仿函数" class="headerlink" title="逻辑仿函数"></a>逻辑仿函数</h4><ul>
<li>函数原型：</li>
<li><ul>
<li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>              逻辑与</li>
<li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                逻辑或</li>
<li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>              逻辑非</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">bool</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">	<span class="comment">//逻辑非  将v容器搬运到v2中，并执行逻辑非运算</span></span><br><span class="line">	vector&lt;<span class="type">bool</span>&gt; v2;</span><br><span class="line">	v2.<span class="built_in">resize</span>(v.<span class="built_in">size</span>());</span><br><span class="line">    <span class="comment">//transform搬运算法，将v搬运到v2，并取反，这里的取反就是使用的内建仿函数，这里是bool类型</span></span><br><span class="line">	<span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(),  v2.<span class="built_in">begin</span>(), <span class="built_in">logical_not</span>&lt;<span class="type">bool</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><ul>
<li>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</li>
<li><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</li>
<li><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</li>
<li><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</li>
</ul>
<h4 id="常用遍历算法"><a href="#常用遍历算法" class="headerlink" title="常用遍历算法"></a>常用遍历算法</h4><h5 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h5><ul>
<li>实现遍历容器</li>
<li>函数原型：</li>
<li><ul>
<li><code>for_each(iterator beg, iterator end, _func);</code></li>
<li><ul>
<li>遍历算法 遍历容器元素</li>
<li>beg 开始迭代器</li>
<li>end 结束迭代器</li>
<li>_func 函数或者函数对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print01</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">print02</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//for_each算法基本用法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//遍历算法</span></span><br><span class="line">    <span class="comment">//这里使用的普通函数作为遍历的规则，只需要使用函数名称</span></span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), print01);</span><br><span class="line">    <span class="comment">//这里使用的仿函数作为遍历的规则，因此需要()作为匿名对象</span></span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">print02</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h5><ul>
<li>搬运容器到另一个容器中</li>
<li>函数原型：</li>
<li><ul>
<li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li>
<li><ul>
<li>beg1 源容器开始迭代器</li>
<li>end1 源容器结束迭代器</li>
<li>beg2 目标容器开始迭代器–传入数据的容器</li>
<li>_func 函数或者函数对象–指的是在传入的过程中可以添加的逻辑</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常用遍历算法  搬运 transform</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransForm</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val+<span class="number">100</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;vTarget; <span class="comment">//目标容器</span></span><br><span class="line">	<span class="comment">//目标容器需要提前开辟空间，如果不开辟空间会报错</span></span><br><span class="line">	vTarget.<span class="built_in">resize</span>(v.<span class="built_in">size</span>()); </span><br><span class="line">	<span class="comment">//可以在遍历容器搬运的时候，添加一下逻辑，比如+100</span></span><br><span class="line">	<span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>(), <span class="built_in">TransForm</span>());</span><br><span class="line">	for_each(vTarget.<span class="built_in">begin</span>(), vTarget.<span class="built_in">end</span>(), <span class="built_in">MyPrint</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用查找算法"><a href="#常用查找算法" class="headerlink" title="常用查找算法"></a>常用查找算法</h4><h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><ul>
<li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li>
<li>函数原型：</li>
<li><ul>
<li><code>find(iterator beg, iterator end, value);</code></li>
<li><ul>
<li>按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</li>
<li>beg 开始迭代器</li>
<li>end 结束迭代器</li>
<li>value 查找的元素</li>
</ul>
</li>
</ul>
</li>
<li>注：查找自定义的数据类型时，需要重载==运算符</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找普通数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//查找容器中是否有 5 这个元素</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;没有找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//因为find算法底层并不知道你要怎么找这个自定义的数据</span></span><br><span class="line">    <span class="comment">//因此，需要重载==运算符</span></span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	<span class="comment">//创建数据</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">	v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p4);</span><br><span class="line">	<span class="comment">//重载之后，find就知道怎么查找自定义的数据类型</span></span><br><span class="line">	vector&lt;Person&gt;::iterator it = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), p2);</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;没有找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a>find_if</h5><ul>
<li>按照条件查找元素</li>
<li>函数原型：</li>
<li><ul>
<li><code>find_if(iterator beg, iterator end, _Pred);</code></li>
<li><ul>
<li>按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置（是从左到右查找，因此只会返回一个）</li>
<li>beg 开始迭代器</li>
<li>end 结束迭代器</li>
<li>_Pred 函数或者谓词（返回bool类型的仿函数）</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内置数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterFive</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">GreaterFive</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greater20</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Person &amp;p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> p.m_Age &gt; <span class="number">20</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	<span class="comment">//创建数据</span></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line">	v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p4);</span><br><span class="line">	<span class="comment">//使用仿函数自定义规则</span></span><br><span class="line">	vector&lt;Person&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">Greater20</span>());</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>())&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;没有找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;  <span class="comment">//返回的是ccc的数据</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a>adjacent_find</h5><ul>
<li>查找相邻重复的元素</li>
<li>函数原型：</li>
<li><ul>
<li><code>adjacent_find(iterator beg, iterator end);</code></li>
<li><ul>
<li>查找相邻重复元素,返回相邻元素的第一个位置的迭代器，找不到就返回end()</li>
<li>beg 开始迭代器</li>
<li>end 结束迭代器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="comment">//查找相邻重复元素</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">adjacent_find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找不到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找到相邻重复元素为:&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="biinary-search"><a href="#biinary-search" class="headerlink" title="biinary_search"></a>biinary_search</h5><ul>
<li>查找指定元素是否存在（返回的是bool类型，二分法查找快）</li>
<li>函数原型：</li>
<li><ul>
<li><code>bool binary_search(iterator beg, iterator end, value);</code></li>
<li><ul>
<li>查找指定的元素，查到 返回true  否则false</li>
<li>注意: 在<strong>无序序列中不可用</strong>，必须是升序的容器，否则找不到</li>
<li>beg 开始迭代器</li>
<li>end 结束迭代器</li>
<li>value 查找的元素</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//二分查找</span></span><br><span class="line">    <span class="comment">//这里是升序的，因此能够查到</span></span><br><span class="line">    <span class="comment">//如果在容器最后添加一个2，那么就找不到，直接返回false</span></span><br><span class="line">	<span class="type">bool</span> ret = <span class="built_in">binary_search</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(),<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret)&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;未找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><ul>
<li>统计元素的个数</li>
<li>函数原型：</li>
<li><ul>
<li><code>count(iterator beg, iterator end, value);</code></li>
<li><ul>
<li>返回在容器中出现value的个数（int类型）</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
<li>value统计的元素，可以使用自定义的数据类型，但是需要重载==元素符，因为底层是使用＝＝去对比的</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内置数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="type">int</span> num = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">4</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//需要重载==运算符，要不然编译器并不知道你要怎么找</span></span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Person &amp; p)&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Age == p.m_Age)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">35</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">35</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;曹操&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line">	v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p5);</span><br><span class="line">    <span class="comment">//定义一个你要查找的类型</span></span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;诸葛亮&quot;</span>,<span class="number">35</span>)</span></span>;</span><br><span class="line">	<span class="comment">//在容器里寻找，跟p数据相同的数据个数</span></span><br><span class="line">	<span class="type">int</span> num = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), p);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h5><ul>
<li>按照条件去统计元素的个数</li>
<li>函数原型：</li>
<li><ul>
<li><code>count_if(iterator beg, iterator end, _Pred);</code></li>
<li><ul>
<li>按照条件统计元素个数（使用谓词）</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
<li>_pred 谓词</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内置数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greater4</span>&#123;       <span class="comment">//一元谓词</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val &gt;= <span class="number">4</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="type">int</span> num = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">Greater4</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;大于4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeLess35</span>&#123;　　<span class="comment">//一元谓词</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person &amp;p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> p.m_Age &lt; <span class="number">35</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">35</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">35</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;曹操&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">	v.<span class="built_in">push_back</span>(p5);</span><br><span class="line">	<span class="type">int</span> num = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">AgeLess35</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;小于35岁的个数：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用排序算法"><a href="#常用排序算法" class="headerlink" title="常用排序算法"></a>常用排序算法</h4><h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><ul>
<li>对容器内的元素进行排序</li>
<li>函数原型：</li>
<li><ul>
<li><code>sort(iterator beg, iterator end, _Pred);</code></li>
<li><ul>
<li>默认从小到大的排序</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
<li>_pred 谓词</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">	<span class="comment">//sort默认从小到大排序</span></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="comment">//下面使用内建函数（STL内部建立的仿函数，可以直接使用）</span></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a>random_shuffle</h5><ul>
<li>洗牌，将容器内元素打乱，随机调整次序</li>
<li>函数原型：</li>
<li><ul>
<li><code>random_shuffle(iterator beg, iterator end);</code></li>
<li><ul>
<li>在指定的范围内打乱顺序（按照随机种子进行打乱）</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用系统时间作为随机种子，这样每次运行后的随机打乱才是真正的随机</span></span><br><span class="line">	<span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打乱顺序</span></span><br><span class="line">	<span class="built_in">random_shuffle</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h5><ul>
<li>两个容器合并，并且存储在另一个容器中</li>
<li>函数原型：</li>
<li><ul>
<li><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></li>
<li><ul>
<li>两个容器合并，这两个容器必须是有序的，而且都是升序或者降序，不能一升一降</li>
<li>合并之后，会自动排序，升序</li>
<li>参数就是，第一个容器的迭代器，第二个容器的迭代器，最后放在的容器的开始迭代器</li>
<li>beg1 开始的迭代器</li>
<li>end1 结束的迭代器</li>
<li>beg2 开始的迭代器</li>
<li>end2 结束的迭代器</li>
<li>dest 目标容器的开始迭代器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//这两个容器必须都是相同的顺序</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vtarget;</span><br><span class="line">	<span class="comment">//目标容器需要提前开辟空间</span></span><br><span class="line">	vtarget.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v2.<span class="built_in">size</span>());</span><br><span class="line">	<span class="comment">//合并  需要两个有序序列</span></span><br><span class="line">	<span class="built_in">merge</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vtarget.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="comment">//合并之后，自动排序，升序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h5><ul>
<li>将容器内元素进行反转</li>
<li>函数原型：</li>
<li><ul>
<li><code>reverse(iterator beg, iterator end);</code></li>
<li><ul>
<li>将指定容器内的元素反回来存储</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">    <span class="comment">//反转后</span></span><br><span class="line">	<span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用拷贝和替换算法"><a href="#常用拷贝和替换算法" class="headerlink" title="常用拷贝和替换算法"></a>常用拷贝和替换算法</h4><h5 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h5><ul>
<li>容器内指定范围的元素拷贝到另一个容器中</li>
<li>函数原型：</li>
<li><ul>
<li><code>copy(iterator beg, iterator end, iterator dest);</code></li>
<li><ul>
<li>拷贝，一般不适用这个，因为这其实就是个赋值</li>
<li>beg 开始迭代器</li>
<li>end 结束迭代器</li>
<li>dest 目标起始迭代器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">    <span class="comment">//需要提前resize</span></span><br><span class="line">	v2.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>());</span><br><span class="line">	<span class="built_in">copy</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h5><ul>
<li>将容器内指定范围内的旧元素修改为新元素</li>
<li>函数原型：</li>
<li><ul>
<li><code>replace(iterator beg, iterator end, oldvalue, newvalue);</code></li>
<li><ul>
<li>将区间内的旧元素替换成新元素，如果有多个旧元素，那么就全部替换</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
<li>oldvalue 旧元素</li>
<li>newvalue 新元素</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//将容器中的20 替换成 2000</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;替换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">replace</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">20</span>,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="replace-if"><a href="#replace-if" class="headerlink" title="replace_if"></a>replace_if</h5><ul>
<li>将区间内满足条件的元素，替换成指定元素</li>
<li>函数原型：</li>
<li><ul>
<li><code>replace_if(iterator beg, iterator end, _pred, newvalue);</code></li>
<li><ul>
<li>按照条件替换元素，使用谓词</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
<li>_pred 谓词</li>
<li>newvalue 替换的新元素</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReplaceGreater30</span>&#123;    <span class="comment">//一元谓词</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val &gt;= <span class="number">30</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//将容器中大于等于的30 替换成 3000</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;替换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">replace_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">ReplaceGreater30</span>(), <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h5><ul>
<li>互换两个容器的元素</li>
<li>函数原型：</li>
<li><ul>
<li><code>swap(container c1, container c2);</code></li>
<li><ul>
<li>互换两个容器的元素</li>
<li>c1 第一个容器</li>
<li>c2 第二个容器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i+<span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;交换后： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">swap</span>(v1, v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用算术生成算法"><a href="#常用算术生成算法" class="headerlink" title="常用算术生成算法"></a>常用算术生成算法</h4><h5 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h5><ul>
<li>计算区间内容器元素的累计总和，需要包含头文件<code>#include &lt;numeric&gt;</code></li>
<li>函数原型：</li>
<li><ul>
<li><code>accumulate(iterator beg, iterator end, value);</code></li>
<li><ul>
<li>计算容器内的元素总和</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
<li>value 起始值</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//如果不用这个起始值，就设置成0</span></span><br><span class="line">	<span class="type">int</span> total = <span class="built_in">accumulate</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;total = &quot;</span> &lt;&lt; total &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h5><ul>
<li>向容器中填充指定的元素，需要包含头文件<code>#include &lt;numeric&gt;</code></li>
<li>函数原型：</li>
<li><ul>
<li><code>fill(iterator beg, iterator end, value);</code></li>
<li><ul>
<li>向指定的范围内填充value</li>
<li>beg 开始的迭代器</li>
<li>end 结束的迭代器</li>
<li>value 填充的值</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="comment">//刚开始resize，容器里面都是0</span></span><br><span class="line">	v.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="comment">//填充100,这样容器中是10个100</span></span><br><span class="line">	<span class="built_in">fill</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常用集合算法"><a href="#常用集合算法" class="headerlink" title="常用集合算法"></a>常用集合算法</h4><h5 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a>set_intersection</h5><ul>
<li>求两个容器的交集</li>
<li>函数原型：</li>
<li><ul>
<li><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></li>
<li><ul>
<li>求两个集合的交集，并将交集的元素放到指定的容器中</li>
<li>两个容器必须是有序的序列</li>
<li>返回值是指定的交集容器中存放数据的最后一个位置的迭代器</li>
<li>beg1 容器1的开始迭代器</li>
<li>end1 容器1的结束迭代器</li>
<li>beg2 容器2的开始迭代器</li>
<li>end2 容器2的结束迭代器</li>
<li>dest 目标容器的开始迭代器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myPrint</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i+<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line">	<span class="comment">//取两个里面较小的值给目标容器开辟空间</span></span><br><span class="line">	vTarget.<span class="built_in">resize</span>(<span class="built_in">min</span>(v1.<span class="built_in">size</span>(), v2.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="comment">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator itEnd = </span><br><span class="line">        <span class="built_in">set_intersection</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="comment">//如果遍历的结束迭代器使用的是vTarget.end()</span></span><br><span class="line">    <span class="comment">//那么就会出现就会打印后面多一串0</span></span><br><span class="line">	for_each(vTarget.<span class="built_in">begin</span>(), itEnd, <span class="built_in">myPrint</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a>set_union</h5><ul>
<li>求两个集合的并集</li>
<li>函数原型：</li>
<li><ul>
<li><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></li>
<li><ul>
<li>求两个集合的并集，跟上面求交集一样</li>
<li>必须是两个有序的序列</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myPrint</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i+<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line">	<span class="comment">//取两个容器的和给目标容器开辟空间</span></span><br><span class="line">	vTarget.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v2.<span class="built_in">size</span>());</span><br><span class="line">	<span class="comment">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator itEnd = </span><br><span class="line">        <span class="built_in">set_union</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="comment">//跟求交集一样，如果不用itEnd就多打印一串0</span></span><br><span class="line">	for_each(vTarget.<span class="built_in">begin</span>(), itEnd, <span class="built_in">myPrint</span>());</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a>set_difference</h5><ul>
<li>求两个集合的差集</li>
<li>函数原型：</li>
<li><ul>
<li><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></li>
<li><ul>
<li>两个集合必须是有序序列</li>
<li>求集合差集，v1和v2的差集，就是v1中有而v2中没有的元素；v2和v1的差集，就是v2中有而v1中没有的元素</li>
<li>beg1 容器1开始的迭代器</li>
<li>end1 容器1结束的迭代器</li>
<li>beg2 容器2开始的迭代器</li>
<li>end2 容器2结束的迭代器</li>
<li>dest 目标容器开始的迭代器</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i+<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line">	<span class="comment">//取两个里面较大的值给目标容器开辟空间</span></span><br><span class="line">	vTarget.<span class="built_in">resize</span>( <span class="built_in">max</span>(v1.<span class="built_in">size</span>() , v2.<span class="built_in">size</span>()));</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v1与v2的差集为： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator itEnd = </span><br><span class="line">        <span class="built_in">set_difference</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line">    </span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;v2与v1的差集为： &quot;</span> &lt;&lt; endl;</span><br><span class="line">	itEnd = <span class="built_in">set_difference</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line">    <span class="comment">//如果遍历之后，依然跟上面求交集和并集一样</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>C++笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记（四）模板</title>
    <url>/2022/04/08/C++%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p>此C++系列的笔记，是根据黑马程序员的C++视频教程所写。这部分包括函数模板和类模板</p>
<span id="more"></span>

<ul>
<li>泛型编程，就是利用的模板技术</li>
<li>学习模板不是为了写模板，而是为了能够去使用容器中的模板</li>
</ul>
<h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul>
<li>语法：<code>template&lt;typename T&gt;</code> 后面紧跟函数的声明或者定义，就是函数模板</li>
<li><ul>
<li>template：声明创建模板</li>
<li>typename：表明后面的符号是一种数据类型，可以使用class代替</li>
<li>T：通用的数据类型，可以使用别的字母</li>
<li>&lt;&gt;：这里面是模板参数列表</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以交换数据函数为例</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapint</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapdouble</span><span class="params">(<span class="type">double</span> &amp;a, <span class="type">double</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面两个函数实现的方式都一样，只不过数据类型不一样，因此可以使用模板来重写</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;    <span class="comment">//声明一个模板，告诉编译器后面的T是一个通用数据类型，不用报错</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myswap</span><span class="params">(T &amp;a, T &amp;b)</span></span>&#123;</span><br><span class="line">    T temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上面就是一个模板，在调用的时候，可以不关注于数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//两种方式使用函数模板：</span></span><br><span class="line">    <span class="comment">//１、自动类型推导</span></span><br><span class="line">    <span class="built_in">myswap</span>(a,b);</span><br><span class="line">    <span class="comment">//２、显示指定类型</span></span><br><span class="line">    <span class="built_in">myswap</span>&lt;<span class="type">int</span>&gt;(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>自动类型推导，必须推导出一致的数据类型T才可以使用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用上面的模板函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="built_in">myswap</span>(a,b);        <span class="comment">//正确</span></span><br><span class="line">    <span class="comment">//myswap(a,c);        //错误，因为编译器不知道T到底是什么数据类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>模板必须要确定出T的数据类型，才可以使用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;dsad &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//func();            //错误，因为没有确定出T的数据类型，编译器不知道应该给T什么数据类型了</span></span><br><span class="line">    <span class="built_in">func</span>&lt;<span class="type">int</span>&gt;();       <span class="comment">//正确，因为你指定了T的数据类型，虽然没有去使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="普通函数和函数模板的区别"><a href="#普通函数和函数模板的区别" class="headerlink" title="普通函数和函数模板的区别"></a>普通函数和函数模板的区别</h4><ul>
<li>普通函数调用时候可以发生自动类型转换（隐式类型转换）</li>
<li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li>
<li>如果利用显示指定类型的方式，可以发生隐式类型转换</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myadd1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">myadd2</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">//普通函数可以隐式类型转换</span></span><br><span class="line">    <span class="built_in">myadd1</span>(a,c);           <span class="comment">//自动转换成ASCII计算了</span></span><br><span class="line">    <span class="comment">//自动类型推导，不会发生隐式类型转换</span></span><br><span class="line">    <span class="comment">//myadd2(a,c);　　　　　　　//编译器不知道T到底是什么数据类型</span></span><br><span class="line">    <span class="comment">//显示指定类型，可以发生隐式类型转换</span></span><br><span class="line">    <span class="built_in">myadd2</span>&lt;<span class="type">int</span>&gt;(a,c);       <span class="comment">//编译器会自动类型转换成int型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="普通函数和函数模板的调用规则"><a href="#普通函数和函数模板的调用规则" class="headerlink" title="普通函数和函数模板的调用规则"></a>普通函数和函数模板的调用规则</h4><ul>
<li>如果普通函数和函数模板都可以实现，那么优先调用普通函数</li>
<li>可以通过空模板参数列表来强制调用函数模板</li>
<li>函数模板也可以发生重载</li>
<li>如果函数模板能够有更好的匹配，优先调用函数模板</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;asd&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//模板函数</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sda&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载的模板函数</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(T a, T b, T c)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;asda&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//普通函数和模板函数都可以使用，则优先普通函数</span></span><br><span class="line">    <span class="built_in">myprint</span>(a, b);</span><br><span class="line">    <span class="comment">//空模板参数列表强制使用模板函数</span></span><br><span class="line">    myprint&lt;&gt;(a, b);</span><br><span class="line">    <span class="comment">//模板函数可以发生重载</span></span><br><span class="line">    <span class="built_in">myprint</span>(a, b, <span class="number">100</span>);</span><br><span class="line">    <span class="comment">//函数模板有更好的匹配，就优先使用模板函数</span></span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> d = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="comment">//因为模板函数更加适合这个函数的参数类型，因此会调用模板函数</span></span><br><span class="line">    <span class="built_in">myprint</span>(c, d);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h4><ul>
<li>模板并不是万能的</li>
<li><ul>
<li>对于上面那些模板的例子，如果传入的a,b是数组或者自定义的数据类型（类），那么就无法实现了</li>
<li>为了解决上面的问题，可以为这些特定的类型提供具体化的模板</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用自定义的Person类型，实现一个具体化的模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//普通函数模板</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myCompare</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a == b)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体化，显示具体化模板是以template&lt;&gt;开头，并通过名称来指出类型，就不需要Tle ,直接指定了T的类型了，需要写出具体的数据类型</span></span><br><span class="line"><span class="comment">//具体化优先于常规模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="function"><span class="type">bool</span> <span class="title">myCompare</span><span class="params">(Person &amp;p1, Person &amp;p2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( p1.m_Name  == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="comment">//内置数据类型可以直接使用通用的函数模板</span></span><br><span class="line">	<span class="type">bool</span> ret = <span class="built_in">myCompare</span>(a, b);</span><br><span class="line">    </span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="comment">//自定义数据类型，不会调用普通的函数模板</span></span><br><span class="line">	<span class="comment">//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</span></span><br><span class="line">    <span class="comment">//具体化模板优先使用</span></span><br><span class="line">	<span class="type">bool</span> ret = <span class="built_in">myCompare</span>(p1, p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><h4 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h4><ul>
<li>语法：<code>template&lt;typename T&gt;</code> 后面紧跟类，就是类模板</li>
<li><ul>
<li>tempalte：声明创建模板</li>
<li>typename：可以使用class代替，这里的typename或者class就是要告诉编译器，后面的变量是一个通用数据类型，不需要报错</li>
<li>&lt;&gt;：这里面是模板参数列表</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面使用class和typename都一样，没有区别</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;　　　　　　　　　　　　<span class="comment">//类模板</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(NameType name, AgeType age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    NameType m_name;　　　　　　　　<span class="comment">//使用通用数据类型</span></span><br><span class="line">    AgeType m_age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;asd&quot;</span>, <span class="number">10</span>);  <span class="comment">//使用类模板的时候需要具体化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类模板和函数模板的区别"><a href="#类模板和函数模板的区别" class="headerlink" title="类模板和函数模板的区别"></a>类模板和函数模板的区别</h4><ul>
<li>类模板没有自动类型推导的使用方式，必须使用具体化的显示类型方式</li>
<li>类模板在模板参数列表中可以有默认参数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类模板没有自动类型推导的使用方式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;　　　　　　　　　　　　<span class="comment">//类模板</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(NameType name, AgeType age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    NameType m_name;　　　　　　　　<span class="comment">//使用通用数据类型</span></span><br><span class="line">    AgeType m_age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Person p(&quot;asd&quot;, 10);       //类模板不能使用自动推导类型方式</span></span><br><span class="line">    Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;asd&quot;</span>, <span class="number">10</span>);  <span class="comment">//使用类模板的时候需要具体化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类模板在模板参数列表中可以有默认参数</span></span><br><span class="line"><span class="comment">//下面是添加了默认参数，让AgeType默认是int，那么可以不用告诉编译器此类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span> = <span class="type">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> Person&#123;　　　　　　　　　　　　<span class="comment">//类模板</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(NameType name, AgeType age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    NameType m_name;　　　　　　　　<span class="comment">//使用通用数据类型</span></span><br><span class="line">    AgeType m_age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//类模板有默认参数，那么使用的时候，可以不指定此类型</span></span><br><span class="line">    Person&lt;string&gt;<span class="built_in">p</span>(<span class="string">&quot;asd&quot;</span>, <span class="number">10</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类模板中成员函数创建时机"><a href="#类模板中成员函数创建时机" class="headerlink" title="类模板中成员函数创建时机"></a>类模板中成员函数创建时机</h4><ul>
<li>普通类中的成员函数在一开始就可以被创建</li>
<li>类模板中的成员函数只有在调用的时候才会被创建</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPerson1</span><span class="params">()</span></span>&#123;&#125;;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPerson2</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myclass</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    T obj;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;obj.<span class="built_in">showPerson1</span>();&#125;　　<span class="comment">//实际上这个T有冲突</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;obj.<span class="built_in">showPerson2</span>();&#125;　　<span class="comment">//T是第一个类也是第二个类，就造成了冲突</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果什么都不写，也会编译成功，因为没有调用的时候不会被创建，也就不会发现冲突了</span></span><br><span class="line">    myclass&lt;Person1&gt; m;</span><br><span class="line">    m.<span class="built_in">func1</span>();</span><br><span class="line">    <span class="comment">//m.func2();     //如果上面调用具体化的Person1，那么这行就会报错</span></span><br><span class="line">    <span class="comment">//调用后才会被创建，此时func1被创建了，而func2没有被创建</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类模板对象做函数参数"><a href="#类模板对象做函数参数" class="headerlink" title="类模板对象做函数参数"></a>类模板对象做函数参数</h4><ul>
<li>指定传入的类型，直接指定传入的对象数据类型（常用）</li>
<li>参数模板化，将对象中的参数变为模板进行传递</li>
<li>整个类模板化，将对象类型模板化进行传递</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span> = <span class="type">int</span>&gt; </span><br><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(NameType name, AgeType age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mName = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mAge = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	NameType mName;</span><br><span class="line">	AgeType mAge;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1、指定传入的类型</span></span><br><span class="line"><span class="comment">//指定传入的参数类型Person&lt;string, int&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson1</span><span class="params">(Person&lt;string, <span class="type">int</span>&gt; &amp;p)</span> </span>&#123;</span><br><span class="line">	p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Person &lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">printPerson1</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2、参数模板化</span></span><br><span class="line"><span class="comment">//把传入的参数中的数据类型设置成模板Person&lt;T1, T2&gt;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1, T2&gt;&amp;p)</span></span>&#123;</span><br><span class="line">	p.<span class="built_in">showPerson</span>();</span><br><span class="line">    <span class="comment">//typeid(T1).name()可以查看数据类型</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;T1的类型为： &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;T2的类型为： &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Person &lt;string, <span class="type">int</span> &gt;<span class="built_in">p</span>(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">90</span>);</span><br><span class="line">	<span class="built_in">printPerson2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3、整个类模板化</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson3</span><span class="params">(T &amp; p)</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;T的类型为： &quot;</span> &lt;&lt; <span class="built_in">typeid</span>(T).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">	p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Person &lt;string, <span class="type">int</span> &gt;<span class="built_in">p</span>(<span class="string">&quot;唐僧&quot;</span>, <span class="number">30</span>);</span><br><span class="line">	<span class="built_in">printPerson3</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类模板和继承"><a href="#类模板和继承" class="headerlink" title="类模板和继承"></a>类模板和继承</h4><ul>
<li>当子类继承的父类是一个模板时，子类在声明时，需要指定出父类的Ｔ类型，如果不指定，编译器无法给予子类分配内存，会报错</li>
<li>如果想灵活指定出父类Ｔ的类型，子类也需要变为类模板</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;            <span class="comment">//父类是个模板</span></span><br><span class="line">	T m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//class Son:public Base  //错误，必须知道父类中T的类型才可以向下继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> : <span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt; <span class="comment">//必须指定一个类型</span></span><br><span class="line">&#123;&#125;;　　<span class="comment">//但是如果指定的一个数据类型，之后就不可以改变了，可以使用如下方式灵活使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板继承类模板 ,可以用T2指定父类中的T类型</span></span><br><span class="line"><span class="comment">//就是在子类中即指定自己本身的Ｔ，也可以指定父类的Ｔ</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> : <span class="keyword">public</span> Base&lt;T2&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Son2</span>()&#123;</span><br><span class="line">		cout &lt;&lt; <span class="built_in">typeid</span>(T1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="built_in">typeid</span>(T2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用Son2&lt;int, char&gt;就可以指定子类是int,父类是char</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Son2&lt;<span class="type">int</span>, <span class="type">char</span>&gt; child1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类模板成员函数类外实现"><a href="#类模板成员函数类外实现" class="headerlink" title="类模板成员函数类外实现"></a>类模板成员函数类外实现</h4><ul>
<li>类模板中成员函数的类外实现，需要写明这是类模板的成员函数，也需要指定作用域</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类模板中成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//成员函数类内声明</span></span><br><span class="line">	<span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">	T1 m_Name;</span><br><span class="line">	T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;  <span class="comment">//需要指明这是类模板的类外成员函数实现</span></span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age) &#123;　</span><br><span class="line">    <span class="comment">//作用域Person&lt;T1, T2&gt;</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line"><span class="comment">//如构造函数一样</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>() &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类模板分文件编写"><a href="#类模板分文件编写" class="headerlink" title="类模板分文件编写"></a>类模板分文件编写</h4><ul>
<li>由于类模板在不调用的时候不会被创建，因此在分文件编写的时候会出现问题</li>
<li>解决方式：</li>
<li><ul>
<li>包含的头文件中直接包含.cpp源文件（不常用）</li>
<li>将类模板的声明和实现写到同一个文件中，形成后缀为.hpp的文件，在包含的头文件中包含此hpp文件</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接包含cpp源文件</span></span><br><span class="line"><span class="comment">/******person.h文件******/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;             <span class="comment">//类模板的声明</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">	T1 m_Name;</span><br><span class="line">	T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/******person.cpp文件******/</span></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>() &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******main.cpp文件******/</span></span><br><span class="line"><span class="comment">//#include &quot;person.h&quot;     //错误</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;person.cpp&quot;</span>　　　<span class="comment">//正确</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果包含的是person.h文件，那么下面两行会报错，</span></span><br><span class="line">    <span class="comment">//因为你只是包含的h头文件，而类模板在调用之前不会被创建，这时候编译器就找不到类模板的成员函数了</span></span><br><span class="line">    <span class="comment">//因此，第一种方式，包含.cpp文件</span></span><br><span class="line">    <span class="function">Person&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用hpp文件，就是h文件和cpp文件融合在一起</span></span><br><span class="line"><span class="comment">//把类模板的成员函数的声明和实现写到一起，形成hpp文件</span></span><br><span class="line"><span class="comment">/******person.hpp文件******/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;             <span class="comment">//类模板的声明</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">	T1 m_Name;</span><br><span class="line">	T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>() &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******main.cpp文件******/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;person.hpp&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//这时候，直接包含hpp文件就好了</span></span><br><span class="line">    <span class="function">Person&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">	p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="类模板与友元"><a href="#类模板与友元" class="headerlink" title="类模板与友元"></a>类模板与友元</h4><ul>
<li>友元的全局函数在类内实现：直接在类内声明友元即可</li>
<li>友元的全局函数在类外实现：需要让编译器提前知道全局函数的存在</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt; <span class="keyword">class</span> <span class="title class_">Person</span>;</span><br><span class="line"><span class="comment">//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到</span></span><br><span class="line"><span class="comment">//可以将函数体写在这，也可以只将函数声明写在这，但是必须在类模板之前，让编译器知道这个全局函数的类外实现</span></span><br><span class="line"><span class="comment">//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); </span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1, T2&gt; &amp; p)</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;类外实现 ---- 姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="comment">//1、全局函数配合友元   类内实现　　直接写就行</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">printPerson</span><span class="params">(Person&lt;T1, T2&gt; &amp; p)</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2、全局函数配合友元  类外实现　　复杂的多，需要提前让编译器知道</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="type">void</span> printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(T1 name, T2 age)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T1 m_Name;</span><br><span class="line">	T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1、全局函数在类内实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Person &lt;string, <span class="type">int</span> &gt;<span class="built_in">p</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="comment">//1、全局函数在类内实现　调用方式一样</span></span><br><span class="line">	<span class="built_in">printPerson</span>(p);</span><br><span class="line">    <span class="comment">//2、全局函数在类外实现　调用方式一样</span></span><br><span class="line">    <span class="built_in">printPerson2</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>C++笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake工具笔记</title>
    <url>/2022/04/25/CMake%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>这是CMake相关的笔记，可以通过目录或者搜索寻找相关知识</p>
<span id="more"></span>

<h3 id="编译器安装"><a href="#编译器安装" class="headerlink" title="编译器安装"></a>编译器安装</h3><ul>
<li>安装GCC、GDB、CMake</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential gdb</span><br><span class="line">sudo apt install cmake</span><br></pre></td></tr></table></figure>

<ul>
<li>验证安装成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc --version      <span class="comment"># C语言的编译器</span></span><br><span class="line">g++ --version      <span class="comment"># C++语言的编译器</span></span><br><span class="line">gdb --version      <span class="comment"># 调试器</span></span><br><span class="line">cmake --version</span><br></pre></td></tr></table></figure>

<h3 id="gcc、g-、make、cmake"><a href="#gcc、g-、make、cmake" class="headerlink" title="gcc、g++、make、cmake"></a>gcc、g++、make、cmake</h3><h4 id="gcc和g"><a href="#gcc和g" class="headerlink" title="gcc和g++"></a>gcc和g++</h4><h5 id="gcc与g-的概念"><a href="#gcc与g-的概念" class="headerlink" title="gcc与g++的概念"></a>gcc与g++的概念</h5><ul>
<li>GCC是linux下最常用的C语言编译器，能够编译多种语言</li>
<li>gcc是GCC中的C编译器</li>
<li>g++是GCC中的C++编译器</li>
</ul>
<h5 id="gcc和g-主要区别"><a href="#gcc和g-主要区别" class="headerlink" title="gcc和g++主要区别"></a>gcc和g++主要区别</h5><ul>
<li>对于 <em>.c和</em>.cpp文件，gcc分别当做c和cpp文件编译（c和cpp的语法强度是不一样的）; g++则统一当做cpp文件编译</li>
<li>使用g++编译文件时，g++会自动链接标准库STL，而gcc不会自动链接STL，在用gcc编译c++文件时，为了能够使用STL，需要加参数 –lstdc++ ，但这并不代表 gcc –lstdc++ 和 g++等价</li>
<li>gcc在编译C文件时，可使用的预定义宏是比较少的</li>
</ul>
<h4 id="make和cmake"><a href="#make和cmake" class="headerlink" title="make和cmake"></a>make和cmake</h4><ul>
<li>当只有一个文件去编译的时候，可以使用g++编译，但是当有很多文件时，使用g++命令编译工作量巨大，因此可以使用makefile文件，针对拥护指定的命令编译和连接。（就是活makefile包括了gcc命令）</li>
<li>简单的工程完全可以手写makefile文件，但是工程巨大的时候，就提出了cmake工具。就是用户自己写CMakeList.txt文件，使用cmake工具自动生成makefile文件，再使用make工具，对工程进行编译。</li>
<li>cmake的优点是可以跨平台使用，就是会生成对应平台支持的makefile文件</li>
</ul>
<h3 id="gcc编译器"><a href="#gcc编译器" class="headerlink" title="gcc编译器"></a>gcc编译器</h3><h4 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h4><h5 id="1-预处理（源文件-gt-i）"><a href="#1-预处理（源文件-gt-i）" class="headerlink" title="1.预处理（源文件 -&gt; .i）"></a>1.预处理（源文件 -&gt; .i）</h5><ul>
<li><p><strong>预处理器都干了什么</strong></p>
</li>
<li><ul>
<li>预处理阶段不会做任何语法检查，因为预处理器不会，而且预处理命令不属于C/C++的语句，(这也是宏定义的时候不加分号的原因)，语法检查是编译器做的事情</li>
<li>将所有的#define宏定义展开，就是代码中的宏定义用具体指定的值替代</li>
<li>处理所有的条件预编译指令，如#if #ifdef #elif #else等等</li>
<li>将#include（预编译指令）包含的文件插入到预编译指令的位置</li>
<li>删除所有注释</li>
<li>添加行号和标示，用于在编译调试过程中使用</li>
</ul>
</li>
<li><p><strong>预处理命令</strong></p>
</li>
<li><ul>
<li><strong>宏定义</strong></li>
<li><ul>
<li>预处理#include时，为了防止文件被重复引用，有两种方式：#ifndef和#pragma</li>
<li>#ifndef是防止一块代码被重复引用，在C中经常使用，尤其是在头文件的开头，防止重复引用</li>
<li>#pragme once是C++的特性（现在新的GCC也支持），可以在头文件的开头写明，这样不会出现文件被引用多次的情况，防止引发宏名碰撞出现一些奇怪的问题。</li>
<li>#pragma后面可以接的不仅仅是once还可以有其他的供编译器识别</li>
<li>#ifndef的对象是一块代码，#pragma的对象是一个文件</li>
</ul>
</li>
<li><strong>预先编译命令</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="center">写法</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">#include</td>
<td align="center">尖括号：编译器会在系统路径下查找头文件<br />双引号：编译器现在当前目录下查找头文件，然后去系统路径查找</td>
</tr>
<tr>
<td align="center">#define</td>
<td align="center">无参宏定义：#define 宏名 字符串<br />有参宏定义：#define 宏名（参数表） 字符串</td>
</tr>
<tr>
<td align="center">#ifdef #else #endif #ifndef</td>
<td align="center">条件编译，只会处理起作用的部分代码</td>
</tr>
<tr>
<td align="center">#if #elif</td>
<td align="center">#elif相当于else if 语句，注意是#elif，而不是#elseif</td>
</tr>
</tbody></table>
</li>
<li><p><strong>与宏定义相似的处理</strong></p>
</li>
<li><ul>
<li><p><strong>内联函数（inline）</strong></p>
</li>
<li><ul>
<li>普通的函数调用的时候需要保留现场、执行、返回主调函数、恢复现场等等操作，是非常消耗时间的操作。而内联函数，就是<strong>将一些很简单的函数内嵌到调用他的程序代码中</strong>，是一种以空间换时间的方法</li>
<li>内联函数的要求较严格，必须是很简单的函数，所以，就算我们定义了函数是内联函数，编译器也并不一定会将其设置成内联函数，编译器会自动的将一些简单的函数定义为内联函数</li>
<li>内联函数和宏定义的区别在于对参数的处理，宏定义直接替换，而内联函数终究是函数，会进行运算求值，再把结果返回给形参</li>
</ul>
</li>
<li><p><strong>typedef</strong></p>
</li>
<li><ul>
<li>typedef就是给数据类型一个新的名字，跟宏定义也有些相似，但是需要注意一些本质区别</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PIN1 int *           <span class="comment">//将int * 宏定义为PIN1</span></span></span><br><span class="line"><span class="built_in">typedef</span> (<span class="type">int</span> *) PIN2         <span class="comment">//将int * 取个新名字PIN2</span></span><br><span class="line"><span class="comment">//使用的区别</span></span><br><span class="line">PIN1 a,b;                    </span><br><span class="line"><span class="comment">//预处理之后是 int *a,b   直接替换，变成了一个指针，一个整型</span></span><br><span class="line">PIN2 a,b;</span><br><span class="line"><span class="comment">//使用typedef之后，就是两个指针</span></span><br><span class="line"><span class="comment">//typedef可以对结构体进行重命名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">abc</span>&#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> a;</span><br><span class="line">&#125;linklist;</span><br><span class="line"><span class="comment">//linklist就是结构体的别名，完全替代</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>预处理生成文件</strong></p>
</li>
<li><ul>
<li>生成.i文件，如果打开此文件会发现有很多的代码，这是由于将#include插入到文件中了</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -E 选项是对此文件仅进行预处理</span></span><br><span class="line">g++ -E test.cpp -o test.i</span><br></pre></td></tr></table></figure>

<h5 id="2-编译（-i-gt-s）"><a href="#2-编译（-i-gt-s）" class="headerlink" title="2.编译（.i -&gt; .s）"></a>2.编译（.i -&gt; .s）</h5><ul>
<li>将代码翻译成汇编语言</li>
<li>生成.s文件，如果打开此文件会发现里面全部都是汇编语言</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -S 选项是将代码文件翻译成汇编文件（默认就是.s文件）</span></span><br><span class="line">g++ -S test.i -o test.s</span><br></pre></td></tr></table></figure>

<h5 id="3-汇编（-s-gt-o）"><a href="#3-汇编（-s-gt-o）" class="headerlink" title="3.汇编（.s -&gt; .o）"></a>3.汇编（.s -&gt; .o）</h5><ul>
<li>将汇编语言转换成机器可以执行的指令，就是按照对照表将汇编一一翻译</li>
<li>生成.o文件，如果打开此文件会发现里面全是乱码，因为都是机器码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -c 选项将汇编代码翻译成机器码（默认是.o文件）</span></span><br><span class="line">g++ -c test.s -o test.o</span><br></pre></td></tr></table></figure>

<h5 id="4-链接（-o-gt-bin文件）"><a href="#4-链接（-o-gt-bin文件）" class="headerlink" title="4.链接（.o -&gt; bin文件）"></a>4.链接（.o -&gt; bin文件）</h5><ul>
<li>通过使用链接器ld来链接程序运行所需要的目标文件，以及所依赖的其他库文件</li>
<li>链接的主要内容是：将各个模块之间的相互应用处理好，能够正确的衔接</li>
<li>链接的主要过程是：地址和空间分配，重定位等</li>
<li>链接分为静态链接和动态链接：</li>
<li><ul>
<li><strong>静态链接：</strong>在编译阶段直接把静态库加入到可执行文件中，这样使得可执行文件比较大</li>
<li><strong>动态链接：</strong>在链接阶段只加入一些描述信息，在程序执行时再从系统中把相应的动态库加载到内存中</li>
</ul>
</li>
<li>生成bin文件，就是可执行文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -o 生成指定的文件</span></span><br><span class="line">g++ test.o -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h4 id="g-重要编译参数"><a href="#g-重要编译参数" class="headerlink" title="g++重要编译参数"></a>g++重要编译参数</h4><h5 id="g-调试信息"><a href="#g-调试信息" class="headerlink" title="-g 调试信息"></a>-g 调试信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g 选项是使得文件生成调试信息，表示这个程序可以被调试器调试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生带有调试信息的可执行文件test</span></span><br><span class="line">g++ -g test.cpp</span><br></pre></td></tr></table></figure>

<h5 id="O-n-优化代码"><a href="#O-n-优化代码" class="headerlink" title="-O[n] 优化代码"></a>-O[n] 优化代码</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所谓优化,例如省略掉代码中从未使用过的变量、直接将常量表达式用结果值代替等等,这些操作会缩减目标文件所包含的代码量,提高最终生成的可执行文件的运行效率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -O[n] n代表优化等级</span></span><br><span class="line"><span class="comment"># -O 同时减小代码的长度和执行时间,其效果等价于-O1</span></span><br><span class="line"><span class="comment"># -O0 表示不做优化</span></span><br><span class="line"><span class="comment"># -O1 为默认优化</span></span><br><span class="line"><span class="comment"># -O2 除了完成-O1的优化之外,还进行一些额外的调整工作,如指令调整等</span></span><br><span class="line"><span class="comment"># -O3 包括循环展开和其他一些与处理特性相关的优化工作</span></span><br><span class="line"><span class="comment"># 一般就是用-O2进行优化代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化源代码，并输出可执行文件</span></span><br><span class="line">g++ -O2 test.cpp</span><br></pre></td></tr></table></figure>

<h5 id="l和-L-指定库"><a href="#l和-L-指定库" class="headerlink" title="-l和-L 指定库"></a>-l和-L 指定库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -l参数(小写)就是用来指定程序要链接的库,-l参数紧接着就是库名</span></span><br><span class="line"><span class="comment"># 在/lib和/usr/lib和/usr/local/lib里的库直接用-l参数就能链接</span></span><br><span class="line"><span class="comment"># 链接glog库</span></span><br><span class="line">g++ -lglog test.cpp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果库文件没放在上面三个目录里,需要使用-L参数(大写)指定库文件所在目录</span></span><br><span class="line"><span class="comment"># -L参数跟着的是库文件所在的目录名</span></span><br><span class="line"><span class="comment"># 链接mytest库（动态库）,libmytest.so在指定目录下</span></span><br><span class="line">g++ -L/home -lmytest test.cpp</span><br></pre></td></tr></table></figure>

<h5 id="I-指定头文件搜索目录"><a href="#I-指定头文件搜索目录" class="headerlink" title="-I 指定头文件搜索目录"></a>-I 指定头文件搜索目录</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -I 选项指定包含的头文件的位置</span></span><br><span class="line"><span class="comment"># /usr/include目录一般是不用指定的,gcc知道去那里找,但是如果头文件在其他目录下我们就要用-I参数指定了,比如头文件放在/myinclude目录里,那编译命令行就要加上-I/myinclude 参数了</span></span><br><span class="line"><span class="comment"># -I参数可以用相对路径</span></span><br><span class="line">g++ -I/myinclude test.cpp</span><br></pre></td></tr></table></figure>

<h5 id="Wall-打开警告信息"><a href="#Wall-打开警告信息" class="headerlink" title="-Wall 打开警告信息"></a>-Wall 打开警告信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印出gcc的警告信息</span></span><br><span class="line">g++ -Wall test.cpp</span><br></pre></td></tr></table></figure>

<h5 id="w-关闭警告信息"><a href="#w-关闭警告信息" class="headerlink" title="-w 关闭警告信息"></a>-w 关闭警告信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭所有警告信息</span></span><br><span class="line">g++ -w test.cpp</span><br></pre></td></tr></table></figure>

<h5 id="std-c-11-编译标准"><a href="#std-c-11-编译标准" class="headerlink" title="-std=c++11 编译标准"></a>-std=c++11 编译标准</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用c++11标准进行编译，如果程序中有新特性，就需要添加这项</span></span><br><span class="line">g++ -std=c++11 test.cpp</span><br></pre></td></tr></table></figure>

<h5 id="o-指定输出"><a href="#o-指定输出" class="headerlink" title="-o 指定输出"></a>-o 指定输出</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定输出的文件名，后面跟着的就是输出的文件</span></span><br><span class="line">g++ test.cpp -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h5 id="D-定义宏"><a href="#D-定义宏" class="headerlink" title="-D 定义宏"></a>-D 定义宏</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -Dname 定义宏name,在编译的时候使用定义宏</span></span><br><span class="line"><span class="comment"># 常用场景:</span></span><br><span class="line"><span class="comment"># -DDEBUG定义DEBUG宏，那么在程序中如果有#ifdef DEBUG的代码，就会执行，如下面例子：</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">	<span class="comment">#ifdef DEBUG</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;DEBUG LOG\n&quot;</span>);</span><br><span class="line">	<span class="comment">#endif</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;in\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 如果使用了g++ -DDEBUG main.cpp 那么就会指定第7行</span></span><br></pre></td></tr></table></figure>

<h4 id="g-编译实战"><a href="#g-编译实战" class="headerlink" title="g++编译实战"></a>g++编译实战</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.<span class="comment"># 目录结构</span></span><br><span class="line">├── include</span><br><span class="line">│   └── swap.h</span><br><span class="line">├── main.cpp</span><br><span class="line">└── src</span><br><span class="line">    └── swap.cpp</span><br></pre></td></tr></table></figure>

<h5 id="直接编译"><a href="#直接编译" class="headerlink" title="直接编译"></a>直接编译</h5><ul>
<li>最简单的编译</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ main.cpp src/swap.cpp -Iinclude</span><br><span class="line"><span class="comment"># 直接指定两个输入的源文件和指定头文件所在目录</span></span><br><span class="line">./a.out</span><br></pre></td></tr></table></figure>

<ul>
<li>添加参数编译</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ main.cpp src/swap.cpp -Iinclude -std=c++11 -O2 -Wall -o b.out</span><br><span class="line"><span class="comment"># 添加一堆参数</span></span><br><span class="line">./b.out</span><br></pre></td></tr></table></figure>

<h5 id="使用库文件编译"><a href="#使用库文件编译" class="headerlink" title="使用库文件编译"></a>使用库文件编译</h5><ul>
<li>使用静态库链接，生成可执行文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先在其他的源文件下生成自己的静态库文件.a，然后在main源文件下链接</span></span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="comment"># 汇编，生成.o文件</span></span><br><span class="line">g++ swap.cpp -c -I../include</span><br><span class="line"><span class="comment"># 生成静态库文件.a　库文件都是lib*.a，其中的*指的就是库名</span></span><br><span class="line"><span class="comment"># 下面就是将swap.o转换成静态库文件libswap.a</span></span><br><span class="line">ar rs libswap.a swap.o</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 链接，生成可执行文件</span></span><br><span class="line">g++ main.cpp -Iinclude -Lsrc -lswap -o static_main</span><br><span class="line"><span class="comment"># -Iinclude 指定头文件搜索目录</span></span><br><span class="line"><span class="comment"># -Lsrc 指定库文件的目录</span></span><br><span class="line"><span class="comment"># -lswap 指定库的名字，就是libswap.a中的swap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行可执行文件</span></span><br><span class="line">./static_main</span><br></pre></td></tr></table></figure>

<ul>
<li>使用动态库链接，生成可执行文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先在其他的源文件下生成自己的动态库文件.so，然后在main源文件下链接</span></span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="comment"># 汇编，生成.so文件</span></span><br><span class="line">g++ Swap.cpp -I../include -fPIC -shared -o libSwap.so</span><br><span class="line"><span class="comment"># -fPIC 生成位置无关代码，就是代码没有绝对跳转，都是相对跳转，一般生成动态库都是需要这个的</span></span><br><span class="line"><span class="comment"># -shared 用于生成动态库</span></span><br><span class="line"><span class="comment"># 上面命令等价于以下两条命令</span></span><br><span class="line"><span class="comment">## gcc Swap.cpp -I../include -c -fPIC</span></span><br><span class="line"><span class="comment">## gcc -shared -o libSwap.so Swap.o</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 链接，生成可执行文件</span></span><br><span class="line">g++ main.cpp -Iinclude -Lsrc -lswap -o share_main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行可执行文件，需要指定动态库的路径</span></span><br><span class="line">LD_LIBRARY_PATH=src ./share_main</span><br></pre></td></tr></table></figure>

<h3 id="GDB调试（未更新）"><a href="#GDB调试（未更新）" class="headerlink" title="GDB调试（未更新）"></a>GDB调试（未更新）</h3><p>这部分以后再说，因为目前很少会去使用单纯的GDB调试，都是使用Clion或者其他的编辑器中的GDB调试功能。</p>
<h3 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h3><ul>
<li>CMake是一个<strong>跨平台</strong>的安装<strong>编译工具</strong>,可以用简单的语句来描述<strong>所有平台</strong>的安装(编译过程)</li>
<li>CMakeLists.txt可以自动产生可执行文件需要的Makefile文件等工具</li>
</ul>
<h4 id="语法特性"><a href="#语法特性" class="headerlink" title="语法特性"></a>语法特性</h4><ul>
<li>基本语法格式：指令（参数1 参数2 …）</li>
<li><ul>
<li>参数使用<strong>括号</strong>括起</li>
<li>参数之间使用<strong>空格</strong>或者<strong>分号</strong>分开</li>
</ul>
</li>
<li><strong>指令是大小写无关的，但是参数和变量是大小写相关的</strong></li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置变量，大小写是不一样的</span></span><br><span class="line"><span class="keyword">set</span>(HELLO hello.cpp)      </span><br><span class="line"><span class="comment"># 下面两行是一样的效果，因为指令是大小写无关的</span></span><br><span class="line"><span class="keyword">add_executable</span>(hello main.cpp hello.cpp)</span><br><span class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello main.cpp <span class="variable">$&#123;HELLO&#125;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>变量使用${}方式取值</strong>（这点跟shell脚本差不多），但是在<strong>IF控制语句中需要直接使用变量名</strong></li>
</ul>
<h4 id="重要指令"><a href="#重要指令" class="headerlink" title="重要指令"></a>重要指令</h4><h5 id="cmake-minimum-required"><a href="#cmake-minimum-required" class="headerlink" title="cmake_minimum_required"></a>cmake_minimum_required</h5><ul>
<li><strong>指定CMake的最小版本要求</strong>（一般是文件的第一个指令）</li>
<li><ul>
<li>语法：<code>cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMake最小版本要求2.8.3，语法后面的[]是如果不符合版本要求输出什么</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h5 id="project"><a href="#project" class="headerlink" title="project"></a>project</h5><ul>
<li><strong>定义工程的名称</strong>，也可以指定工程支持的语言</li>
<li><ul>
<li>语法：<code>project(projectname [CXX] [C] [Java])</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定工程名为HELLOWORLD</span></span><br><span class="line"><span class="keyword">project</span>(HELLOWORLD)</span><br></pre></td></tr></table></figure>

<h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><ul>
<li><strong>显式的定义变量</strong></li>
<li><ul>
<li>语法：<code>set(VAR [VALUE] [CACHE TYPE DOCSTRING [FORCE]])</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量,其值为sayhello.cpp hello.cpp</span></span><br><span class="line"><span class="keyword">set</span>(SRC sayhello.cpp hello.cpp)</span><br></pre></td></tr></table></figure>

<h5 id="message"><a href="#message" class="headerlink" title="message"></a>message</h5><ul>
<li><strong>调试手段，相当于echo/printf</strong>，主要用于查看cmake文件的语法错误</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印cmake中的变量值use_test</span></span><br><span class="line"><span class="keyword">message</span>(<span class="string">&quot;use_test: $&#123;use_test&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="add-definitions"><a href="#add-definitions" class="headerlink" title="add_definitions"></a>add_definitions</h5><ul>
<li><strong>添加宏定义</strong>（相当于g++编译器中的-D参数）</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般使用在if这种条件编译中</span></span><br><span class="line"><span class="comment"># 在代码中，会运行定义了TEST_DEBUG部分的代码</span></span><br><span class="line"><span class="keyword">if</span> (TEST_DEBUG) </span><br><span class="line">	<span class="keyword">add_definitions</span>(-DTEST_DEBUG)</span><br><span class="line"><span class="keyword">endif</span>(TEST_DEBUG)</span><br></pre></td></tr></table></figure>

<h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><ul>
<li>list是cmake对数组进行的一系列操作，<a href="https://cmake.org/cmake/help/latest/command/list.html">有很多不同的命令</a></li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令很多，仅列举一个</span></span><br><span class="line"><span class="keyword">set</span>( mylist )</span><br><span class="line"><span class="keyword">list</span>( APPEND mylist a )</span><br><span class="line"><span class="keyword">list</span>( APPEND mylist b )</span><br><span class="line"><span class="comment"># 向变量mylist添加数据</span></span><br></pre></td></tr></table></figure>

<h5 id="find-package"><a href="#find-package" class="headerlink" title="find_package"></a>find_package</h5><ul>
<li>查找系统中的库文件所在位置</li>
<li><ul>
<li>语法：<code>find_package(LAPACK REQUIRED)</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find_package一般用于opencv等库的查找</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV <span class="number">3.0</span> REQUIRED)</span><br><span class="line"><span class="comment"># 然后cmake就会把找到的LAPACK库的路径送给已经定义好的变量中</span></span><br><span class="line"><span class="comment"># 头文件路径给$&#123;LAPACK_INCLUDE_DIRS&#125;</span></span><br><span class="line"><span class="comment"># 库文件路径给$&#123;LAPACK_LIBRARIES&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="include-directories"><a href="#include-directories" class="headerlink" title="include_directories"></a>include_directories</h5><ul>
<li><strong>向工程添加多个特定的头文件搜索路径</strong>（相当于g++编译器中的-i参数）</li>
<li><ul>
<li>语法：<code>include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 ...)</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将/usr/include/myincludefolder 和 ./include 添加到头文件搜索路径</span></span><br><span class="line"><span class="keyword">include_directories</span>(/usr/<span class="keyword">include</span>/myincludefolder ./<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure>

<h5 id="link-directories"><a href="#link-directories" class="headerlink" title="link_directories"></a>link_directories</h5><ul>
<li><strong>向工程中添加多个特定的库文件搜索路径</strong>（相当于g++编译器中的-L参数）</li>
<li><ul>
<li>语法：<code>link_directories(dir1 dir2 ...)</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将/usr/lib/mylibfolder 和 ./lib 添加到库文件搜索路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(/usr/lib/mylibfolder ./lib)</span><br></pre></td></tr></table></figure>

<h5 id="add-library"><a href="#add-library" class="headerlink" title="add_library"></a>add_library</h5><ul>
<li><strong>生成库文件</strong></li>
<li><ul>
<li>语法：<code>add_library(libname [SHARED|STATIC|MODULE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN)</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过变量 SRC 生成 libhello.so 共享库</span></span><br><span class="line"><span class="keyword">add_library</span>(hello SHARED <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="add-compile-options"><a href="#add-compile-options" class="headerlink" title="add_compile_options"></a>add_compile_options</h5><ul>
<li><strong>添加编译参数</strong>，就之前g++命令中那些参数都可以添加进来</li>
<li><ul>
<li>语法：<code>add_compile_options(&lt;option&gt; ...)</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加编译参数 -Wall -std=c++11 -O2</span></span><br><span class="line"><span class="keyword">add_compile_options</span>(-Wall -std=c++<span class="number">11</span> -O2)</span><br></pre></td></tr></table></figure>

<h5 id="add-executable"><a href="#add-executable" class="headerlink" title="add_executable"></a>add_executable</h5><ul>
<li><strong>生成可执行文件</strong></li>
<li><ul>
<li>语法：<code>add_executable(exename source1 source2 ...)</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译main.cpp生成可执行文件main</span></span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)</span><br></pre></td></tr></table></figure>

<h5 id="target-link-libraries"><a href="#target-link-libraries" class="headerlink" title="target_link_libraries"></a>target_link_libraries</h5><ul>
<li><strong>为target添加需要链接的共享库</strong>（相当于g++编译器中的-l参数）</li>
<li><ul>
<li>语法：<code>target_link_libraries(target library1&lt;debug | optimized&gt; library2...)</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将hello动态库文件链接到可执行文件main</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(main hello)</span><br></pre></td></tr></table></figure>

<h5 id="add-subdirectory"><a href="#add-subdirectory" class="headerlink" title="add_subdirectory"></a>add_subdirectory</h5><ul>
<li><strong>向当前工程添加存放源文件的子目录,并可以指定中间二进制和目标二进制存放的位置</strong>（就是说，当子文件中有CMakeLists.txt文件的时候，需要使用这个指令指定其位置）</li>
<li><ul>
<li>语法：<code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加src子目录,src中需有一个CMakeLists.txt</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src)</span><br></pre></td></tr></table></figure>

<h5 id="aux-source-directory"><a href="#aux-source-directory" class="headerlink" title="aux_source_directory"></a>aux_source_directory</h5><ul>
<li><strong>发现一个目录下所有的源代码文件并将列表存储在一个变量中,这个指令临时被用来自动构建源文件列表</strong></li>
<li><ul>
<li>语法：<code>aux_source_directory(dir VARIABLE)</code></li>
</ul>
</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量,其值为当前目录下所有的源代码文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. SRC)</span><br><span class="line"><span class="comment"># 编译SRC变量所代表的源代码文件,生成main可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(main <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h4><ul>
<li><strong>PROJECT_NAME</strong> -&gt; 定义的工程名称</li>
<li><strong>CMAKE_C_FLAGS</strong> -&gt; gcc编译选项</li>
<li><strong>CMAKE_CXX_FLAGS</strong> -&gt; g++编译选项</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在CMAKE_CXX_FLAGS编译选项后追加-std=c++11</span></span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>CMAKE_BUILD_TYPE</strong> -&gt; 编译类型（debug和release）</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设定编译类型为debug,调试时需要选择debug</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"><span class="comment"># 设定编译类型为release,发布时需要选择release</span></span><br><span class="line"><span class="comment"># 设置成release就是使用-O3,并关闭Debug模式</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Release)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>CMAKE_SOURCE_DIR</strong> -&gt; 工程顶层目录</li>
<li><strong>PROJECT_SOURCE_DIR</strong> -&gt; 工程顶层目录</li>
<li><strong>_SOURCE_DIR</strong> -&gt; 工程顶层目录（上面这三个是一样的）</li>
</ul>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>CMake笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享－OctoMap八叉树建图原理</title>
    <url>/2022/04/14/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%EF%BC%8D%E5%85%AB%E5%8F%89%E6%A0%91%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<p>技术分享是课题组大概每一个半月需要我做的环节。这篇文章只是讲述了八叉树建图的原理，并没有涉及到OctoMap库的应用。</p>
<span id="more"></span>

<blockquote>
<p>论文：OctoMap:An Efficient Probabilistic 3D Mapping Framework Based on Octrees</p>
</blockquote>
<h3 id="OctoMap建图框架"><a href="#OctoMap建图框架" class="headerlink" title="OctoMap建图框架"></a>OctoMap建图框架</h3><h4 id="八叉树原理"><a href="#八叉树原理" class="headerlink" title="八叉树原理"></a>八叉树原理</h4><p><u>这部分主要讲解八叉树是什么？</u></p>
<p>八叉树就是一个空间构造地图的方法，其基本思想就是递归地把空间分成八个方块。当你想要找到空间中一个点块时，就不断地将分解的空间块再次分成8块，直到找到你要寻找的“点块”的大小为止。这些立方块在内存中以八叉树的结构组织起来，每个树的节点对应于空间中的一个立方块，每个立方块称为体素。在达到给定的最小体素大小之前（也称为叶子节点），这个空间会被连续细分为8个子空间。可以通过下面的图片对八叉树有个基本的认识：</p>
<img src="https://s2.loli.net/2022/04/14/OaG48kC6KyYtUSF.png" alt="" style="zoom: 67%;" />

<p>空间中一个节点（体素）的状态一共有三种：<strong>占据，空闲和未知</strong>，如果我们使用离散标签（0,1）来对每个节点表示这三种状态，那么当某一节点下的子节点的状态是相同的时候（子节点都被占据、都是空闲或者都是不确定），就可以将这些子节点修剪掉，只保留父节点，从而节省内存。</p>
<p>对于空间中的三种状态中，未知和空闲是相对模糊的概念（因为我们一般得到的观测数据都是占据与否，而没有未知和空闲），为了解决这个问题，就需要显式地表示空闲体素，这些空闲体素是在传感器和被测点之间的区域创建（因为被测点和传感器之间一定是无遮挡的），例如，沿着激光发射方向，在传感器中心和激光击中的点的连线上所有体素都是空闲状态。</p>
<p>八叉树中有一个分辨率的概念：<strong>最小的体素（立方块）大小就是分辨率</strong>。例如，我们定义1cm的分辨率（程序中单位是m），那么在最大深度为16的八叉树地图中（深度一般为16也可以为32），就指定了这个地图的空间大小是655.35$m^3$ 。</p>
<h4 id="概率信息融合"><a href="#概率信息融合" class="headerlink" title="概率信息融合"></a>概率信息融合</h4><p><u>这一部分主要讲解的是对于叶子节点（空间中的最小体素），应该有什么信息表示它的空间状态？</u></p>
<h5 id="概率更新模型"><a href="#概率更新模型" class="headerlink" title="概率更新模型"></a>概率更新模型</h5><p>仅仅使用离散的标签不能够应用于测量的噪声数据，应该使用0~1之间的数值表示，也就是概率模型。使用概率数值对体素的占据与否进行判断，<strong>概率值越高，这个体素被占据的可能性越大</strong>。而这个概率模型在论文中如下：<br>$$<br>P(n|z_{1:t})=<br>[1+\frac{1-P(n|z_t)}{P(n|z_t)}\frac{1-P(n|z_{1:t-1})}{P(n|z_{1:t-1})}\frac{P(n)}{1-P(n)}]^{-1}<br>$$<br>对上面的公式进行简单的解读：</p>
<ul>
<li><p>上面公式是通过2D栅格地图推导的，先对上面的公式符号有所了解：</p>
</li>
<li><ul>
<li>$P(n|z_{1:t})$ ：是在观测数据为$｛z_1,z_2…z_t｝$ （其中t是时刻）下判断$n$叶子节点为占据的概率</li>
<li>$P(n)$ ：是在未观测前叶子节点是否被占据的先验概率，一般我们基于均匀假设认为空间中一个叶子节点被占据是均匀分布的，所以$P(n)＝0.5$ </li>
</ul>
</li>
<li><p>下面是2D栅格地图的推导，同样适用于在3D地图中：</p>
</li>
<li><ul>
<li>通过贝叶斯法则和马尔科夫性，推理节点的占据概率（后验概率）计算过程：</li>
<li><ul>
<li>其中$x_{1:t}$ 是指1~t时刻的机器人位姿集合，因为对于建图来说，并不考虑当前的位姿状态，因此下面的公式中会出现去掉$x_t$的情况</li>
</ul>
</li>
</ul>
<p>$$<br>\begin{align}<br>P(m_i|x_{1:t},z_{1:t})<br>&amp;=\frac{P(z_t|m_i,z_{1:t-1},x_{1:t})P(m_i|z_{1:t-1},x_{1:t})}{P(z_t|z_{1:t-1},x_{1:t-1})}\\\<br>&amp;=\frac{P(z_t|m_i,x_t)P(m_i|z_{1:t-1},x_{1:t-1})} {P(z_i|z_{1:t-1},x_{1:t-1})}\\\<br>&amp;=\frac{P(m_i|z_t,x_t)P(z_t|x_t)P(m_i|z_{1:t-1},x_{1:t-1})} {P(m_i|x_t)P(z_t|z_{1:t-1},x_{1:t-1})}\\\<br>&amp;=\frac{P(m_i|z_t,x_t)P(z_t|x_t)P(m_i|z_{1:t-1},x_{1:t-1})} {P(m_i)P(z_t|z_{1:t-1},x_{1:t-1})}<br>\end{align}<br>$$</p>
<ul>
<li>由于上面公式不好计算，引入了几率模型（$Odd$）:</li>
</ul>
<p>$$<br>Odd(A) = \frac{p}{1-p}<br>$$</p>
<ul>
<li>那么就需要得到节点占据概率的反状态，也就是节点的空闲概率：</li>
</ul>
<p>$$<br>P(\hat{m_i}|z_{1:t},x_{1:t})<br>=\frac{P(\hat{m_i}|z_t,x_t)P(z_t|x_t)P(\hat{m_i}|z_{1:t-1},x_{1:t-1})}{P(\hat{m_i})P(z_i|z_{1:t-1},x_{1:t-1})}<br>$$</p>
<ul>
<li>经过几率模型的计算和变换：</li>
</ul>
<p>$$<br>\begin{align}<br>&amp;\frac{P(m_i|z_{1:t},x_{1:t})}{P(\hat{m_i}|z_{1:t},x_{1:t})}=\frac{P(m_i|z_t,x_t)}{1-P(m_i|z_t,x_t)}\frac{P(m_i|z_{1:t-1},x_{1:t-1})}{1-P(m_i|z_{1:t-1},x_{1:t-1})}\frac{1-P(m_i)}{P(m_i)}\\\<br>&amp;\quad\quad经过变换：\frac{P(x)}{1-P(x)}=Y \quad=&gt;\quad P(x)=\frac{1}{1+Y^{-1}}\\\<br>&amp;得到：P(m_i|z_{1:t},x_{1:t})=[1+\frac{1-P(m_i|z_t,x_t)}{P(m_i|z_t,x_t)}\frac{1-P(m_i|z_{1:t-1},x_{1:t-1})}{P(m_i|z_{1:t-1},x_{1:t-1})}\frac{P(m_i)}{1-P(m_i)}]^{-1}<br>\end{align}<br>$$</p>
<ul>
<li>上面得到的式子就与论文中相同了（其中$ｘ$去掉就是论文中的公式）</li>
</ul>
</li>
</ul>
<p>由于我们使用传感器对某一个体素进行检测是不断叠加的，而概率模型并不能进行累加，因此我们需要对乘法形式的概率模型转换成加法形式，就是取对数，根据公式中的结构，使用对数几率模型（$log-Odd$）:<br>$$<br>l(n|z_{1:t})<br>=log(\frac{P(n|z_{1:t})}{1-P(n|z_{1:t})})<br>= log(\frac{P(n|z_{1:t})}{P(\hat{n}|z_{1:t})})<br>$$</p>
<p>因此将上面你的概率模型转化成对数形式，可以<strong>实现对观测数据进行累加</strong>（由于一般情况下我们考虑$P(n)＝0.5$ ，所以$l(n)=0$ 可以去掉，因此论文中也是去掉了这项）：<br>$$<br>l(n|z_{1:t})=<br>l(n|z_t)+l(n|z_{1:t-1})-l(n)<br>$$</p>
<p>通过这个对数几率模型，我们也可以反推回原来的概率值，由此，概率值和对数几率值（$log-Odd$）进行了一一对应：<br>$$<br>P(x)=1-\frac{1}{1+exp(l(x))}<br>$$</p>
<h5 id="OctoMap应用"><a href="#OctoMap应用" class="headerlink" title="OctoMap应用"></a>OctoMap应用</h5><table>
<thead>
<tr>
<th align="center">void</th>
<th align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a08f3d30cc002428cd5c925c4b2c31ba4">setProbHit</a> (double prob)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">void</td>
<td align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a66e1aebc4f4ee4dfc1096006a035a831">setProbMiss</a> (double prob)</td>
</tr>
</tbody></table>
<p>这两个函数决定了概率更新模型的具体参数，就是设置节点在传感器观测为占据/空闲后的概率值。若一个节点是占据的（Hit击中）默认概率值为0.7（对应上面的$P(n|z_t)$），其log Odd为0.85（对应上面的$l(n|z_t)$），若一个节点是空闲的（Miss错过）默认概率值为0.４（对应上面的$P(n|z_t)$），对应的log Odd为-0.4（对应上面的$l(n|z_t)$）。占据指的是观测的物体点，空闲指的是传感器到物体点之间的连线。</p>
<p>查看默认的参数设定：</p>
<table>
<thead>
<tr>
<th align="center">double</th>
<th align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a0e85226a3864e54fddab4a468609928f">getProbHit</a> () const</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a811cab3e2de5ed561473e04729a858b3">getProbHitLog</a> () const</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#ac50656ad2abd2e702681d421c9cf9bb9">getProbMiss</a> () const</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#af84761e2d981ffa1bd7d3a3f7ca424de">getProbMissLog</a> () const</td>
</tr>
</tbody></table>
<h4 id="多分辨率查询"><a href="#多分辨率查询" class="headerlink" title="多分辨率查询"></a>多分辨率查询</h4><p><u>这部分主要讲解的是父节点（除了叶子节点的其他节点）中应该存储什么信息？</u></p>
<p>由于八叉树是一种分层的数据结构，那么我们就可以利用树中的内部节点来实现多分辨率查询。就是说，当树结构只被遍历到一个给定的深度（而不是叶子节点的深度），就会对这个3D空间进行比较粗糙的分割，如下图显示，分别是在不同的分辨率下对图像空间的分割。</p>
<img src="https://s2.loli.net/2022/04/14/iyQsNgZoWbfIL8V.png" alt="" style="zoom:67%;" />

<p>能够进行多分辨率查询，那么就需要确定内部节点的占用概率，而这个占用概率需要聚合其子节点的概率值。在现有的方法中，有两种方法确定内部节点的占用概率，分别是子节点的平均值和最大值：<br>$$<br>\begin{align}<br>&amp;\bar{l}(n)=\frac{1}{8}\sum_{i=1}^{8}{L(n_i)}\\\<br>&amp;or;the;maximum;occupancy\\\<br>&amp;\hat{l}(n)=\max_i{L(n_i)}<br>\end{align}<br>$$<br>在机器人导航中，出于保守考虑，使用<strong>子节点的最大值作为父节点的值</strong>，因为我们可以假设在机器人判断是否可以通过这个节点（空间立方块）的时候，那么直接将这个节点的最大值返回，可以规划无碰撞的路径，是比较保守的考虑。在OctoMap库中，也是应用的子节点的最大值作为父节点的值。</p>
<h4 id="地图压缩"><a href="#地图压缩" class="headerlink" title="地图压缩"></a>地图压缩</h4><p><u>这部分主要讲解如何对树结构进行修剪，实现地图的最大压缩？</u></p>
<h5 id="树结构修剪"><a href="#树结构修剪" class="headerlink" title="树结构修剪"></a>树结构修剪</h5><p>地图压缩的方法，就是对父节点下8个子节点有相同状态时，可以修剪掉此8个子节点。这要求子节点需要拥有相同的状态，然而上面我们的概率更新模型中，对子节点的状态量是一个概率值，无法判断其是否拥有相同的状态。因此，我们就需要使用一个上下限的方式，对节点的状态量进行上下界的分析：<br>$$<br>L(n|z_{1:t})=max(min(L(n|z_{1:t-1})+L(n|z_t),l_{max}),l_{min})<br>$$<br>其中$l_{max}$和$l_{min}$就是设置的上下限，当节点的$log-Odd$值达到下界或者上界时，我们就认为这个节点是稳定的（稳定空闲或者稳定占据），这样对于父节点的所有子节点都满足同一个稳定状态的时候，就可以修剪掉。如果在将来的测量与内部节点的状态相矛盾，那么它的子节点将相应的重新生成和更新。</p>
<p>这种压缩的方式仅仅会导致概率值接近0和1的信息丢失，而对于两者之间的概率值会被保存下来。这足够完成机器人的导航任务，并能够实现更少的内存需求。</p>
<h5 id="OctoMap应用-1"><a href="#OctoMap应用-1" class="headerlink" title="OctoMap应用"></a>OctoMap应用</h5><table>
<thead>
<tr>
<th align="center">void</th>
<th align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a754f6a8a72b55548fbb857f799e4157d">setClampingThresMax</a> (double thresProb)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">void</td>
<td align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#af60785aee147c34c5adde3eaa2972237">setClampingThresMin</a> (double thresProb)</td>
</tr>
</tbody></table>
<p>这两个函数决定了体素执行$log-Odd$更新的阈值范围，就是上面说的上下界数值。就是说如果某一个体素的概率值爬升到0.97（对应的$log-Odd$为3.5）或者下降到0.12（对应的$log-Odd$为-2），就不再进行更新计算（认为这个是稳定的）。</p>
<p>查看默认的参数设定：</p>
<table>
<thead>
<tr>
<th align="center">double</th>
<th align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a1b00bb63bab03e4ddb4fb49327ca7c7d">getClampingThresMax</a> () const</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a07d0d7e5459e7b207edbcbdd6e24ef50">getClampingThresMaxLog</a> () const</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a27083afa63cde7665333f82ecaa7d34c">getClampingThresMin</a> () const</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center"><a href="https://octomap.github.io/octomap/doc/classoctomap_1_1AbstractOccupancyOcTree.html#a7ab1e736299dd2cd2799c4b20cbda54d">getClampingThresMinLog</a> () const</td>
</tr>
</tbody></table>
<h3 id="OctoMap实现细节"><a href="#OctoMap实现细节" class="headerlink" title="OctoMap实现细节"></a>OctoMap实现细节</h3><h4 id="OctoMap数据结构"><a href="#OctoMap数据结构" class="headerlink" title="OctoMap数据结构"></a>OctoMap数据结构</h4><p><u>这部分主要讲解的是OctoMap库在内存中如何存储八叉树的数据结构？</u></p>
<p>在普通的建图过程中，需要每个建立的地图点设置好位置信息，但是八叉树的结构中，在建立八叉树地图的时候，节点的位置信息就已经确定，而不需要在节点中设置位置信息，只需要在节点中设置好占据概率。如下图所示，八叉树的每个节点使用指向8个指针数组的指针（数组中的每个值都是指向子节点的指针），只有当节点确实有子节点并且不是叶子节点时，才会分配这个数组，而每个叶子节点就只是存储一个空指针和一个占据概率值，对于机器人相关的数据集中，大部分都是叶子节点，所以会导致内存占用很少。<br><img src="https://s2.loli.net/2022/04/14/vKN2YQoVWsESlri.png" alt="" style="zoom: 67%;" /><br>因此，每个节点只分配一个 float 型的数据存储以及指向子节点的指针数组的指针(而不是直接包含子节点地址的指针)，只有存在子节点时，才会分配子节点的指针数组空间。由此在 32-bit 系统中(4 字节对齐)，每个内部节点需要40个字节，叶子节点只需要8个字节。</p>
<h4 id="OctoMap地图存储"><a href="#OctoMap地图存储" class="headerlink" title="OctoMap地图存储"></a>OctoMap地图存储</h4><p><u>这部分主要讲解的是OctoMap库如何实现在尽量不损数据的情况下压缩地图存储量？</u></p>
<p>在进行地图存储时需要在信息量损失最小的情况下进行压缩。如下图右所示，存储序列化时，每个叶子节点总共需要4字节的概率值，不需要状态量，而每个内部节点总共只需要2字节，用每2位数据表示8个子节点的状态量：00:未知，01:占据（表示这个为叶子节点），10:空闲，11:内部节点（表示有子节点）。在这种压缩方式下，大范围地图的存储一般也能很小。</p>
<img src="https://s2.loli.net/2022/04/14/8oVkilI7YcBJGxU.png" alt="" style="zoom:67%;" />

<p>根据存储的地图重建地图时，只需要知道坐标原点即可，虽然节点中并没有存储空间信息，但是由于八叉树的数据结构而将空间信息隐式的存储在编码中。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="https://blog.csdn.net/weixin_41377786/article/details/120045287">2D栅格-3D八叉树地图及其概率更新_喂-你在楞什么的博客-CSDN博客</a><br><a href="https://www.cnblogs.com/gaoxiang12/p/5041142.html">SLAM拾萃(1)：octomap - 半闲居士 - 博客园 (cnblogs.com)</a><br><a href="https://leijiezhang001.github.io/OctoMap/">OctoMap | LeijieZhang个人博客</a><br><a href="https://blog.csdn.net/zengbowengood/article/details/104873012">从logit变换到logistic模型_帅帅de三叔-CSDN博客_logit变换</a></p>
</blockquote>
]]></content>
      <categories>
        <category>三维重建</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Git版本控制工具笔记</title>
    <url>/2022/04/27/Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>git是分布式版本控制工具，此文章是根据黑马程序员的git教程编写，其中大量的使用了黑马程序员的教程中的内容，尤其是最后的IDE使用Git，但是IDE的部分其实只要自己捣鼓捣鼓就会了</p>
<span id="more"></span>

<h3 id="Git工作流程图"><a href="#Git工作流程图" class="headerlink" title="Git工作流程图"></a>Git工作流程图</h3><p><img src="https://s2.loli.net/2022/04/27/ZVRSE5HqAGBcbkK.png" alt=""></p>
<p>上图几乎包含git常用的所有命令：</p>
<ul>
<li>clone (克隆)：从远程仓库中克隆代码到本地仓库</li>
<li>checkout (检出)：其实是切换分支</li>
<li>add (添加)：在提交前先将代码提交到暂存区</li>
<li>commit (提交)：提交到本地仓库。本地仓库中保存着修改的各个历史版本</li>
<li>fetch (抓取)：从远程库,抓取到本地仓库,不进行任何的合并动作,一般操作比较少。</li>
<li>pull (拉取)：从远程库拉到本地库,自动进行合并(merge),然后放到到工作区,相当于<br>fetch+merge</li>
<li>push (推送)：修改完成后,需要和团队成员共享代码时,将代码推送到远程仓库</li>
</ul>
<h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><h4 id="Git基本配置"><a href="#Git基本配置" class="headerlink" title="Git基本配置"></a>Git基本配置</h4><p>Git安装好之后，需要为本地设置好用户信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下面两行命令就是为本地git设置用户信息</span></span><br><span class="line"><span class="comment"># 这个信息不需要一定与github或者gitee相同，这个仅仅是你本地的用户</span></span><br><span class="line"><span class="comment"># 如果使用了--global 那么就只需要运行一次</span></span><br><span class="line">git config --global user.name <span class="string">&quot;zhangzuo&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;zhangzuoos@163.com&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="获取本地Git仓库"><a href="#获取本地Git仓库" class="headerlink" title="获取本地Git仓库"></a>获取本地Git仓库</h4><p>将本地的目录设置成Git操作的仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd到需要设置仓库的文件夹内</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 将这个文件夹设置成git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 这时候你会发现文件夹内出现了一个.git文件，就代表成功</span></span><br></pre></td></tr></table></figure>

<h4 id="基础操作命令"><a href="#基础操作命令" class="headerlink" title="基础操作命令"></a>基础操作命令</h4><p><img src="https://s2.loli.net/2022/04/27/E9SsbDzPi32dgju.png" alt=""></p>
<h5 id="查看修改状态（status）"><a href="#查看修改状态（status）" class="headerlink" title="查看修改状态（status）"></a>查看修改状态（status）</h5><ul>
<li>命令：<code>git status</code></li>
<li>作用：查看暂存区和工作区的修改状态，如果有文件修改了，那么这个命令就会发现，就可以commit到本地仓库了。</li>
</ul>
<h5 id="添加到暂存区（add）"><a href="#添加到暂存区（add）" class="headerlink" title="添加到暂存区（add）"></a>添加到暂存区（add）</h5><ul>
<li>命令：<code>git add 文件名</code></li>
<li>作用：将工作区的文件修改到暂存区，一般都是直接<code>git add .</code></li>
</ul>
<h5 id="提交本地仓库（commit）"><a href="#提交本地仓库（commit）" class="headerlink" title="提交本地仓库（commit）"></a>提交本地仓库（commit）</h5><ul>
<li>命令：<code>git commit -m &quot;注释内容&quot;</code></li>
<li>作用：将暂存区的内容提交到本地仓库的当前分支，上面的指令宏，如果不使用-m，那么就会让你填写注释文件，也是一样的效果</li>
</ul>
<h5 id="查看提交日志（log）"><a href="#查看提交日志（log）" class="headerlink" title="查看提交日志（log）"></a>查看提交日志（log）</h5><ul>
<li>命令：<code>git log [option]</code></li>
<li><ul>
<li>[option]</li>
<li><ul>
<li>–all 显示所有分支</li>
<li>–pretty=oneline 将提交信息的日志显示为一行</li>
<li>–abbrev-commit 使得输出的commit-id更加简短</li>
<li>–graph 以图的形式显示</li>
</ul>
</li>
</ul>
</li>
<li>作用：显示每次提交的记录，经常用到的命令，因此可以将这个命令打包成别名，在环境配置中重新指定这个命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 在环境配置文件bashrc中，添加如下：</span></span><br><span class="line"><span class="comment"># alias是将命令起个别名</span></span><br><span class="line"><span class="built_in">alias</span> git-log=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span></span><br><span class="line"><span class="comment"># 退出后，使用下面指令，运行环境配置文件</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h5 id="版本回退（reset）"><a href="#版本回退（reset）" class="headerlink" title="版本回退（reset）"></a>版本回退（reset）</h5><ul>
<li>命令：<code>git reset --hard [commitID]</code></li>
<li><ul>
<li>[commitID]：指的是在log命令之后，在每次提交日志前的那一串，就是commitID</li>
</ul>
</li>
<li>作用：切换到对应commitID的版本（注：切换到那个版本就代表，仓库的文件都变成那个版本的形式，新建的文件都不会存在。并且这时候参看log，也不会有那个版本之后的提交记录）</li>
<li><strong>回退反悔指令</strong></li>
<li><ul>
<li>命令：<code>git reflog</code></li>
<li>作用：跟log命令差不多，只不过可以显示已经删除的提交记录，就是你版本回退的记录也有，这时候你在回退到之前的版本就可以反悔了</li>
</ul>
</li>
</ul>
<h5 id="忽略列表（-gitignore）"><a href="#忽略列表（-gitignore）" class="headerlink" title="忽略列表（.gitignore）"></a>忽略列表（.gitignore）</h5><p>在Git管理的时候，有些文件我们并不想跟踪其变化（比如一些cmake产生的文件），那么我们可以创建一个文件，用于告诉Git，这些文件我们不去跟踪状态，这个文件就是.gitignore文件，文件内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.a           <span class="comment"># 所有.a文件不跟踪</span></span><br><span class="line">cmake-*/　　　 <span class="comment"># 所有cmake-*目录下的文件不跟踪</span></span><br></pre></td></tr></table></figure>

<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>分支指的是将每个人的工作从主线程序中分离出来，进行Bug修改，开发新功能等等，这样就不会主线的运行</p>
<h5 id="查看本地分支（branch）"><a href="#查看本地分支（branch）" class="headerlink" title="查看本地分支（branch）"></a>查看本地分支（branch）</h5><ul>
<li>命令：<code>git branch</code></li>
<li>作用：查看当前的分支，一般一开始的是默认分支master（如果后面直接加分支名，就是创建分支）</li>
<li>命令：<code>git branch 分支名</code></li>
<li>作用：创建分支</li>
</ul>
<h5 id="切换分支（checkout）"><a href="#切换分支（checkout）" class="headerlink" title="切换分支（checkout）"></a>切换分支（checkout）</h5><ul>
<li>命令：<code>git checkout 分支名</code></li>
<li>可以直接切换一个不存在的分支（创建并切换）</li>
<li><ul>
<li>命令：<code>git checkout -b 分支名</code></li>
</ul>
</li>
</ul>
<h5 id="合并分支（merge）"><a href="#合并分支（merge）" class="headerlink" title="合并分支（merge）"></a>合并分支（merge）</h5><ul>
<li>命令：<code>git merge 分支名</code></li>
<li>作用：将其他分支的内容<strong>合并到当前分支</strong></li>
</ul>
<h5 id="删除分支（branch-d）"><a href="#删除分支（branch-d）" class="headerlink" title="删除分支（branch -d）"></a>删除分支（branch -d）</h5><p>需要在当前分支，删除其他分支，而不能删除当前分支</p>
<ul>
<li>命令：<code>git branch -d 分支名</code></li>
<li>作用：删除分支时，会进行各种检查</li>
<li>命令：<code>git branch -D 分支名</code></li>
<li>作用：不做任何检查，强制删除（这个检查指的是，如果这个分支的内容并没有合并到其他分支，那么这个分支使用-d是不会删除的，只能使用-D，因为系统认为这个分支是有用的，需要融合到其他分支中）</li>
</ul>
<h5 id="合并冲突问题"><a href="#合并冲突问题" class="headerlink" title="合并冲突问题"></a>合并冲突问题</h5><p>在合并的时候如果两个分支都对同一个文件的同一行进行了修改，那么就需要手动解决冲突问题：</p>
<ol>
<li>处理文件中的冲突的地方（会有显示）</li>
<li>将解决完冲突的文件加入暂存区(add)</li>
<li>提交到本地仓库(commit)<br>注：此时还没有远程仓库的时候，因此就只是提交本地仓库</li>
</ol>
<p><img src="https://s2.loli.net/2022/04/27/Lhgvc7pNJwGdROX.png" alt=""></p>
<h5 id="分支使用原则"><a href="#分支使用原则" class="headerlink" title="分支使用原则"></a>分支使用原则</h5><ul>
<li><strong>master (生产) 分支：</strong>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支</li>
<li><strong>develop (开发) 分支：</strong>是从master创建的分支，一般作为开发部门的主要开发分支，一般都在此版本进行开发，阶段开发完成后，需要合并到master分支，准备上线。</li>
<li><strong>feature/xxxx分支：</strong>从develop创建的分支（功能开发），一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。</li>
<li><strong>hotfix/xxxx分支：</strong>从master派生的分支（Bug修改分支），一般作为线上bug修复使用,修复完成后需要合并到master和develop分支。</li>
</ul>
<h3 id="Git远程仓库（gitee）"><a href="#Git远程仓库（gitee）" class="headerlink" title="Git远程仓库（gitee）"></a>Git远程仓库（gitee）</h3><h4 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h4><h5 id="生成SSH公钥"><a href="#生成SSH公钥" class="headerlink" title="生成SSH公钥"></a>生成SSH公钥</h5><ul>
<li>命令：<code>ssh-keygen -t rsa</code></li>
<li>不断回车，如果公钥已经存在可以直接使用，用这个命令就会覆盖（rsa是算法）</li>
</ul>
<h5 id="设置gitee账户公钥"><a href="#设置gitee账户公钥" class="headerlink" title="设置gitee账户公钥"></a>设置gitee账户公钥</h5><ul>
<li>将<code>~/.ssh.id_rsa.pub</code>中的内容复制到gitee中的SSH公钥中</li>
</ul>
<h5 id="验证配置是否成功"><a href="#验证配置是否成功" class="headerlink" title="验证配置是否成功"></a>验证配置是否成功</h5><ul>
<li>命令：<code>ssh -T git@gitee.com</code></li>
</ul>
<h4 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h4><h5 id="远程对接（remote-add）"><a href="#远程对接（remote-add）" class="headerlink" title="远程对接（remote add）"></a>远程对接（remote add）</h5><ul>
<li>命令：<code>git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</code></li>
<li><ul>
<li>远端名称：默认是origin，取决于远端服务器设置</li>
<li>仓库路径：从gitee网页获取这个URL</li>
<li>例如: <code>git remote add origin git@gitee.com:zhangzuoos/git_test.git</code></li>
</ul>
</li>
<li>作用：将本地仓库和远程仓库进行了对接，就是说以后在本地提交到远程仓库的时候，就会提交到这个URL指定的仓库下</li>
</ul>
<h5 id="查看远程仓库（remote）"><a href="#查看远程仓库（remote）" class="headerlink" title="查看远程仓库（remote）"></a>查看远程仓库（remote）</h5><ul>
<li>命令：<code>git remote</code></li>
<li>作用：查看仓库下的名称，一般就是origin</li>
</ul>
<h5 id="推送远程仓库（push）"><a href="#推送远程仓库（push）" class="headerlink" title="推送远程仓库（push）"></a>推送远程仓库（push）</h5><ul>
<li>命令：<code>git push [-f] [--set-upstream] [远端名称] [本地分支名]:[与远端分支名]</code></li>
<li><ul>
<li>如果本地的分支名和远程的分支名相同，可以只写本地分支名：<code>git push origin master</code></li>
<li>-f 表示强制覆盖</li>
<li>–set-upstream 推送远端之后建立和远端分支的联系：<code>git push --set-upstream origin master</code></li>
<li><ul>
<li>建立了联系后，以后使用推送可以省略分支名和远端名：<code>git push</code>就会将master分支推送已关联的远端分支</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="查看联系（branch-vv）"><a href="#查看联系（branch-vv）" class="headerlink" title="查看联系（branch -vv）"></a>查看联系（branch -vv）</h5><ul>
<li>命令：<code>git branch -vv</code></li>
</ul>
<p><img src="https://s2.loli.net/2022/04/27/4YX7PMshqtoZfwL.png" alt=""></p>
<h5 id="远端仓库克隆（clone）"><a href="#远端仓库克隆（clone）" class="headerlink" title="远端仓库克隆（clone）"></a>远端仓库克隆（clone）</h5><ul>
<li>命令：<code>git clone &lt;仓库路径&gt; [本地目录]</code></li>
<li>作用：将远端仓库的内容直接复制到本地，不仅仅是文件复制了，log的提交记录也会复制下来。（本地目录可以省略，会自动生成一个目录）</li>
</ul>
<h5 id="远端仓库中抓取（fetch）"><a href="#远端仓库中抓取（fetch）" class="headerlink" title="远端仓库中抓取（fetch）"></a>远端仓库中抓取（fetch）</h5><ul>
<li>命令：<code>git fetch [remote name] [branch name]</code></li>
<li>作用：将远端仓库里的更新抓取到本地，<strong>不会进行合并</strong>。如果不指定远端名和分支名，就抓取所有分支</li>
</ul>
<h5 id="远端仓库中拉取（pull）"><a href="#远端仓库中拉取（pull）" class="headerlink" title="远端仓库中拉取（pull）"></a>远端仓库中拉取（pull）</h5><ul>
<li>命令：<code>git pull [remote name] [banch name]</code></li>
<li>作用：将远端仓库里的更新拉到本地并<strong>自动进行合并</strong>，相当于fetch+merge。如果不指定远端名和分支名，则拉取所有分支</li>
</ul>
<h5 id="合并冲突问题-1"><a href="#合并冲突问题-1" class="headerlink" title="合并冲突问题"></a>合并冲突问题</h5><p>如果两个用户都对同一个文件的同一行代码进行了修改，那么在一个用户上传到远端仓库之后，第二个用户上传的时候就会出现冲突<br>为了解决这个冲突问题，就需要在<strong>提交到远端仓库之前先进行拉取（pull），自动合并出现冲突后，在本地修改冲突，然后再推送（push）到远端仓库</strong></p>
<p><img src="https://s2.loli.net/2022/04/27/8gAU7LdWtq9VJjR.png" alt=""></p>
<p>在本地修改冲突的方法同之前的<a href="#####合并冲突问题1-1">冲突解决方法</a></p>
<h3 id="在IDE中使用Git"><a href="#在IDE中使用Git" class="headerlink" title="在IDE中使用Git"></a>在IDE中使用Git</h3><p>在开发过程中，我们大部分时间面对的是IDE，而上面学的那些都是为了能够更好的在IDE中使用Git仓库管理，下面是以黑马程序员的文档中的图片为例，其他的IDE都是一样的，如果你的IDE是中文的只需要自己捣鼓捣鼓就行了</p>
<h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h4><h5 id="gitee中创建仓库"><a href="#gitee中创建仓库" class="headerlink" title="gitee中创建仓库"></a>gitee中创建仓库</h5><p>（这没什么说的，就是需要远端仓库的URL）</p>
<h5 id="将本地设置为git仓库"><a href="#将本地设置为git仓库" class="headerlink" title="将本地设置为git仓库"></a>将本地设置为git仓库</h5><p><img src="https://s2.loli.net/2022/04/27/C2VPrYypADmXzj9.png" alt=""></p>
<h5 id="给项目设置远程仓库"><a href="#给项目设置远程仓库" class="headerlink" title="给项目设置远程仓库"></a>给项目设置远程仓库</h5><p><img src="https://s2.loli.net/2022/04/27/i7ep12RD5AJmfSK.png" alt=""></p>
<h5 id="将项目提交到本地仓库"><a href="#将项目提交到本地仓库" class="headerlink" title="将项目提交到本地仓库"></a>将项目提交到本地仓库</h5><p><img src="https://s2.loli.net/2022/04/27/LUDjOCH71u3mEao.png" alt=""></p>
<h5 id="推送到远端仓库"><a href="#推送到远端仓库" class="headerlink" title="推送到远端仓库"></a>推送到远端仓库</h5><p><img src="https://s2.loli.net/2022/04/27/COxtfhRXIsAoFrl.png" alt=""></p>
<h5 id="IDE常用的Git操作入口"><a href="#IDE常用的Git操作入口" class="headerlink" title="IDE常用的Git操作入口"></a>IDE常用的Git操作入口</h5><p><img src="https://s2.loli.net/2022/04/27/ibRLOjDrz54uyga.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/04/27/c18DQBrFoX6HVua.png" alt=""></p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>Git笔记</tag>
      </tags>
  </entry>
</search>
